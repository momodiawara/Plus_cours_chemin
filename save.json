{
  "nickname": "info2-DIAWARA-Momo",
  "exercises-editors": {
    "1.1_arith": [
      1568808130.514409,
      "let square x = \n  x*x;;\n\"Remplacer cette chaîne par votre code\"\n    \n\nlet perimeter r =\n  2.0*.r*.3.1415927;;\n\"Remplacer cette chaîne par votre code\"\n\nlet div n m =\n  if(m==00 && n!=0) then failwith \"Division_by_zero;;\"\n  else float_of_int(n) /.float_of_int(m);;\n\"Remplacer cette chaîne par votre code\"\n"
    ],
    "1.2_string": [
      1568808590.232514,
      "let bis s =\n  s^s;;\n\"Remplacer cette chaîne par votre code\"\n\nlet times8 s =\n  s^s^s^s^s^s^s^s;;\n\"Remplacer cette chaîne par votre code\"\n\nlet times8_bis s =\n  bis(bis(bis s));;\n\"Remplacer cette chaîne par votre code\"\n"
    ],
    "1.3_bool": [
      1568809038.674758,
      "let is_zero x =\n  if(x==0) then true\n  else  false;;\n\nlet msg_zero x =\n  if (x==0) then \"zero\"\n  else \"not zero\";;\n\n\nlet my_max a b =\n  if(a>b) then a\n  else b;;\n\nlet max_triple a b c =\n  if(a>b) then my_max a c\n  else my_max b c;;\n\nlet max_quadruple a b c d =\n  let z= max_triple a b c in my_max z d;;\n\"Remplacer cette chaîne par votre code\"\n"
    ],
    "2.1_somme": [
      1568810458.865903,
      "let rec sum n = \n  if n=0 then 0\n  else n + sum (n-1);;\n"
    ],
    "2.2_fib": [
      1568809275.005221,
      "let rec fibo n =\n  if (n==0 || n==1) then 1\n  else fibo(n-1) + fibo( n-2);;\n\"Remplacez cette chaîne par votre code\"\n"
    ],
    "2.3_employe": [
      1568810424.191737,
      "let rec pasA n =\n  if (n=0) then 0\n  else 1+pasB (n-1) \nand pasB n =\n  if (n<=0) then 0\n  else if(n mod 2=0) then 1+pasA(n-2)\n  else 1+pasA(n-1);;\n\"Remplacer cette chaîne par votre code\"\n"
    ],
    "2.4_ack": [
      1568810495.13813,
      "let rec ack m n =\n  if(m=0 && n>=0) then n+1\n  else if(m>0 && n=0) then ack (m-1) 1\n  else ack(m-1) (ack m (n-1));;\n\"Remplacez cette chaîne par votre code\"\n"
    ],
    "3.1_listes": [
      1570028698.838053,
      "(* Toutes les fonction sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction recursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec list_length l = match l with\n    []-> 0\n  | a::b -> 1+list_length b;;\n  \nlet rec list_product l = match l with\n    [] -> 1\n  |a::b-> a*list_product b;;\nlet rec mem x l = match l with\n    [] -> false\n  | a::b -> if(a==x) then true else mem x b;;\n\nlet min x y = if(x<y) then x else y;;\n\nlet rec list_min l = match l with\n    []-> failwith \" Liste vide\"\n  |[x]-> x\n  |a::b -> min a (list_min b) ;;\n\nlet rec last l = match l with\n    []-> failwith \"La liste ide n'a pas d'element\"\n  |[a]-> a\n  |a::b -> last b;;\n\nlet rec is_sorted l = match l with\n    []->true\n  |[a]-> true\n  |a::b::c-> if(a>b) then false else is_sorted (b::c);;\nlet rec sum l = match l with\n    []->0\n  |a::b -> a+sum b;;\nlet average l =\n  if( list_length l== 0 ) then failwith \" la Liste est vide \" \n  else sum l / list_length l;; \n\n\"pour parcourir la Liste qu'une seule fois\"\nlet rec nth l k =\n  match l with\n    []-> failwith\" La liste est vide\"\n  |a::b -> if(k==0) then a else nth b (k-1);;\n\"Remplacez cette chaîne par votre code\" ;;\n\nlet rec range n m = \n  if(n=m) then [n]\n  else if(n<m) then n::(range (n+1) m)\n  else n ::(range (n-1) m);;  \n\n"
    ],
    "3.2_listes_poly": [
      1569418215.1259,
      "(* Toutes les fonctions sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction récursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec map f l = match l with\n    []-> []\n  |a::b -> f a :: (map f b);;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec filter p l = match l with\n    []-> []\n  |a::b -> \n      if(p a) then a:: filter p b\n      else filter p b;;\n\nlet rec append l1 l2 = match l1 with\n    []-> l2\n  |a::b -> a:: append b l2;;\n\"Remplacer cette chaîne par votre code\" ;;\nlet rec ajout_fin(l,e) = match l with\n    []   -> [e]\n  |p:: r -> p:: (ajout_fin(r,e));;\n\nlet rec rev l = match l with\n    []->[]\n  |a::b -> ajout_fin (rev b,a);; \n\nlet rec flatten l = match l with\n    []->[]\n  |a::b-> append a (flatten b);;\n\nlet rotation_d l =\n  let rec aux l1 acc = match l1 with\n      [] -> acc \n    | [x]-> [x] @ acc\n    |a::q -> aux q (acc @[a])\n  in aux l [] ;; \n"
    ],
    "3.4_listes_sorting": [
      1569516958.534335,
      "let rec insert x l = match l with\n    []->[x]\n  |a::b -> if (a>x) then x::l\n      else if (a==x) then l\n      else a::(insert x b);;\n\nlet rec sort l = match l with\n    []->[]\n  |[a]->[a]\n  |a::b -> insert a(sort b);;\n\nlet rec mem_sorted x l = match l with\n    []-> false\n  |a::b -> if(a=x) then true\n      else if (a>x) then false\n      else mem_sorted x b;;\n\nlet rec union_sorted l1 l2 = match l1 with\n    []-> l2\n  |a::b -> union_sorted b (insert a l2);;\nlet rec appartient x l= match l with\n    []-> false\n  |a::b ->if(a=x) then true else appartient x b;;  \nlet rec inter_sorted l1 l2 = match l1 with\n    []-> []\n  |t::q -> if(appartient t l2) then t::inter_sorted q l2 else inter_sorted q l2;; \n\nlet rec partition l x = match l with\n    []->[],[]\n  |a::b -> \n      let (l1,l2) = partition b x in \n      if a< x then ((a::l1), l2) else (l1,(a::l2));;\nlet rec quicksort l = match l with\n  |[]->[];\n  |a::q ->\n      let (l1,l2)=partition q a in\n      (quicksort l1)@(a::(quicksort l2));;\n\n"
    ],
    "4.1_arbres": [
      1570622059.052289,
      "let rec size a = match a with\n    Nil -> 0\n  |Node(_,c,b)-> 1 + size c + size b;;\n\n\nlet rec depth a = match a with\n    Nil -> 0\n  |Node(_,c,b)-> 1 + max (depth c) (depth b);;\n\n\nlet rec sum a = match a with\n    Nil-> 0\n  |Node(x,a,b) -> x+ sum a +sum b;;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec contains x a = match a with\n    Nil -> false \n  |Node(r,b,c)-> \n      if(r=x) then true \n      else (contains x b) || (contains x c);;  \n      \nlet rec elements a =match a with\n    Nil ->[]\n  |Node(x,g,d) -> elements g @[x]@ elements d;;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec perfect a = match a with\n    Nil -> true\n  |Node(_,x,y) -> if(depth x != depth y) then false\n      else perfect x && perfect y;;\n\"Remplacer cette chaîne par votre code\" ;;\n"
    ],
    "5.1_calcul_prop": [
      1570624409.009169,
      "let rec string_of_formula f = match f with\n  |Var x -> x\n  |Neg f -> \" Neg \" ^  (string_of_formula f )\n  |And(f1,f2) -> \"(\" ^ (string_of_formula f1)^ \" And \"^(string_of_formula f2)^\")\"\n  |Or(f1,f2) ->\"(\"^(string_of_formula f1)^\" Or \" ^(string_of_formula f2)^\")\"\n;;\n \n\"Remplacer cette chaîne par votre code\"\nlet rec union_s l1 l2 = \n  if List.length l1 =0 then l2\n  else if List.length l2=0 then l1\n  else if List.hd l1 < List.hd l2 then List.hd l1 :: union_s (List.tl l1) l2\n  else if List.hd l1 = List.hd l2 then union_s (List.tl l1) l2\n  else List.hd l2 :: union_s l1 (List.tl l2);;\n\nlet rec list_of_vars f = match f with\n  |Var x -> [x] \n  |Neg f -> list_of_vars f\n  |And (f1,f2) -> union_s (list_of_vars f1) (list_of_vars f2)\n  |Or(f1,f2) -> union_s (list_of_vars f1) (list_of_vars f2);;\n\"Remplacer cette chaîne par votre code\"\n\nlet rec eval_formula f l = match f with\n    Var s -> (List.assoc s l)\n  |Neg f ->not( eval_formula f l)\n  |Or(f1,f2) -> (eval_formula f1 l) || (eval_formula f2 l)\n  |And (f1,f2) -> (eval_formula f1 l) && (eval_formula f2 l);;\n\"Remplacer cette chaîne par votre code\"\n"
    ]
  },
  "exercises": {
    "1.1_arith": {
      "grade": 100,
      "solution": "let square x = \n  x*x;;\n\"Remplacer cette chaîne par votre code\"\n    \n\nlet perimeter r =\n  2.0*.r*.3.1415927;;\n\"Remplacer cette chaîne par votre code\"\n\nlet div n m =\n  if(m==00 && n!=0) then failwith \"Division_by_zero;;\"\n  else float_of_int(n) /.float_of_int(m);;\n\"Remplacer cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 :"
            },
            {
              "text": "square",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "square",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "25",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "square 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "perimeter",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "perimeter",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -4.59584911483368597",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-28.8765720589259374",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -0.546462542249682492",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3.43352546711008788",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 1.31078968810062069",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8.2359346307443726",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -0.298672626139920183",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1.87661548394200484",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 1.99944910636788631",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "12.5629094331737505",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter 0.217590842770654547",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.36716360647027213",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -0.0131657255451678168",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-0.082722694525805468",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -0.855990688666254",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5.37834819756375282",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -3.08856382838739307",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-19.4060191534917728",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perimeter -3.05514657152277",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-19.1960523330519237",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "div",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "div",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "nan",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 2 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.66666666666666663",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 2 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-0.66666666666666663",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 1 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.333333333333333315",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 4 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -4 -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1.33333333333333326",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div 0 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-0.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -3 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3.",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "div -4 -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0.8",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568808130.514409
    },
    "1.2_string": {
      "grade": 100,
      "solution": "let bis s =\n  s^s;;\n\"Remplacer cette chaîne par votre code\"\n\nlet times8 s =\n  s^s^s^s^s^s^s^s;;\n\"Remplacer cette chaîne par votre code\"\n\nlet times8_bis s =\n  bis(bis(bis s));;\n\"Remplacer cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Exercise 1: "
            },
            {
              "text": "bis",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bis",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \", -\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", -, -\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"OCP-, ba- 4456OCPbe\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCP-, ba- 4456OCPbeOCP-, ba- 4456OCPbe\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"-\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"--\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"ba\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"baba\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"be//-4456, 4456#OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"be//-4456, 4456#OCamlbe//-4456, 4456#OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"-OCP//OCPba4456\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-OCP//OCPba4456-OCP//OCPba4456\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \", OCamlOCP//beOCPbe\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", OCamlOCP//beOCPbe, OCamlOCP//beOCPbe\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"beOCPbe--ba, , OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"beOCPbe--ba, , OCamlbeOCPbe--ba, , OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"OCP//OCamlOCP4456be\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCP//OCamlOCP4456beOCP//OCamlOCP4456be\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bis \"#//baOCP#4456OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"#//baOCP#4456OCP#//baOCP#4456OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Exercise 2: "
            },
            {
              "text": "times8",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "times8",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"4456#OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456#OCaml4456#OCaml4456#OCaml4456#OCaml4456#OCaml4456#OCaml4456#OCaml4456#OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \" bebaOCaml, #-// \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-//  bebaOCaml, #-// \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"baOCamlOCaml//\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//baOCamlOCaml//\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \", OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", OCaml, OCaml, OCaml, OCaml, OCaml, OCaml, OCaml, OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"#-ba#//OCamlOCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml#-ba#//OCamlOCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \", , //\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", , //, , //, , //, , //, , //, , //, , //, , //\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"##4456OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"##4456OCP##4456OCP##4456OCP##4456OCP##4456OCP##4456OCP##4456OCP##4456OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"OCPbebaba\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCPbebabaOCPbebabaOCPbebabaOCPbebabaOCPbebabaOCPbebabaOCPbebabaOCPbebaba\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \", -\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\", -, -, -, -, -, -, -, -\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8 \"#OCPOCaml  OCaml //\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //#OCPOCaml  OCaml //\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Exercise 3: "
            },
            {
              "text": "times8_bis",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "times8_bis",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"be\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"bebebebebebebebe\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"-be//4456ba , \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"-be//4456ba , -be//4456ba , -be//4456ba , -be//4456ba , -be//4456ba , -be//4456ba , -be//4456ba , -be//4456ba , \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"OCamlOCamlOCamlOCamlOCamlOCamlOCamlOCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"be,  \"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"be,  be,  be,  be,  be,  be,  be,  be,  \"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"be#be#ba-OCP\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"be#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCPbe#be#ba-OCP\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456, OCamlOCaml4456#OCPbaOCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml4456, OCamlOCaml4456#OCPbaOCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"4456OCPba\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"4456OCPba4456OCPba4456OCPba4456OCPba4456OCPba4456OCPba4456OCPba4456OCPba\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "times8_bis \"//OCamlbeOCP//OCamlOCaml OCaml\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml//OCamlbeOCP//OCamlOCaml OCaml\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568808590.232514
    },
    "1.3_bool": {
      "grade": 100,
      "solution": "let is_zero x =\n  if(x==0) then true\n  else  false;;\n\nlet msg_zero x =\n  if (x==0) then \"zero\"\n  else \"not zero\";;\n\n\nlet my_max a b =\n  if(a>b) then a\n  else b;;\n\nlet max_triple a b c =\n  if(a>b) then my_max a c\n  else my_max b c;;\n\nlet max_quadruple a b c d =\n  let z= max_triple a b c in my_max z d;;\n\"Remplacer cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_zero",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_zero",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_zero 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "msg_zero",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "msg_zero",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"not zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "msg_zero 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"zero\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "my_max",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "my_max",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 1 -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -4 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 4 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -4 -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max 3 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "my_max -3 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "max_triple",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "max_triple",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 40 44",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "44",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 41 46 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 38 37 39",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "39",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 45 37 37",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "45",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 44 39 46",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 42 44 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "44",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 42 38 40",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "42",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 45 46 43",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "46",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 39 45 45",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "45",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_triple 37 41 39",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "41",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "max_quadruple",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "max_quadruple",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -1 -3 3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -2 -3 2 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -3 -2 -3 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 1 -2 4 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 4 -5 -4 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -2 2 -3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -3 -2 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 3 -1 -2 -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple -3 -5 -2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "max_quadruple 3 3 -4 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568809038.674758
    },
    "2.1_somme": {
      "grade": 100,
      "solution": "let rec sum n = \n  if n=0 then 0\n  else n + sum (n-1);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "15",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "45",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 11",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "66",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 13",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "91",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 16",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "136",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568810458.865903
    },
    "2.2_fib": {
      "grade": 100,
      "solution": "let rec fibo n =\n  if (n==0 || n==1) then 1\n  else fibo(n-1) + fibo( n-2);;\n\"Remplacez cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "fibo",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "fibo",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 18",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4181",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 14",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "610",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 11",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "144",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "fibo 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568809275.005221
    },
    "2.3_employe": {
      "grade": 100,
      "solution": "let rec pasA n =\n  if (n=0) then 0\n  else 1+pasB (n-1) \nand pasB n =\n  if (n<=0) then 0\n  else if(n mod 2=0) then 1+pasA(n-2)\n  else 1+pasA(n-1);;\n\"Remplacer cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "pasA",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "pasA",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 52",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "52",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 78",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "78",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 97",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "96",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 49",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "48",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 15",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "14",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 75",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "74",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 12",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "12",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 30",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "30",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasA 73",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "72",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "pasB",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "pasB",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 10",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 12",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "11",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 34",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "33",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 71",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "71",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 78",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "77",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 53",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "53",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 72",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "71",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "pasB 43",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "43",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568810424.191737
    },
    "2.4_ack": {
      "grade": 100,
      "solution": "let rec ack m n =\n  if(m=0 && n>=0) then n+1\n  else if(m>0 && n=0) then ack (m-1) 1\n  else ack(m-1) (ack m (n-1));;\n\"Remplacez cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "ack",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "ack",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 0 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 2 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "11",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "13",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "29",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "61",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ack 3 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "125",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1568810495.13813
    },
    "3.1_listes": {
      "grade": 100,
      "solution": "(* Toutes les fonction sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction recursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec list_length l = match l with\n    []-> 0\n  | a::b -> 1+list_length b;;\n  \nlet rec list_product l = match l with\n    [] -> 1\n  |a::b-> a*list_product b;;\nlet rec mem x l = match l with\n    [] -> false\n  | a::b -> if(a==x) then true else mem x b;;\n\nlet min x y = if(x<y) then x else y;;\n\nlet rec list_min l = match l with\n    []-> failwith \" Liste vide\"\n  |[x]-> x\n  |a::b -> min a (list_min b) ;;\n\nlet rec last l = match l with\n    []-> failwith \"La liste ide n'a pas d'element\"\n  |[a]-> a\n  |a::b -> last b;;\n\nlet rec is_sorted l = match l with\n    []->true\n  |[a]-> true\n  |a::b::c-> if(a>b) then false else is_sorted (b::c);;\nlet rec sum l = match l with\n    []->0\n  |a::b -> a+sum b;;\nlet average l =\n  if( list_length l== 0 ) then failwith \" la Liste est vide \" \n  else sum l / list_length l;; \n\n\"pour parcourir la Liste qu'une seule fois\"\nlet rec nth l k =\n  match l with\n    []-> failwith\" La liste est vide\"\n  |a::b -> if(k==0) then a else nth b (k-1);;\n\"Remplacez cette chaîne par votre code\" ;;\n\nlet rec range n m = \n  if(n=m) then [n]\n  else if(n<m) then n::(range (n+1) m)\n  else n ::(range (n-1) m);;  \n\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_length",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_length",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-4; 2; -2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-2; -2; -2; 1; -2; 4; 2; -2; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-1; 0; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-3; -5; 3; 0; 4; 2; -2; -3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [1; -1; -2; -5; -3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [4; 2; 1; 4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_length [-4; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_product",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_product",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [2; 3; 1; 0; 2; 1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [2; 0; -5; 2; -1; 4; 0; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [3; 2; 2; 4; -2; -2; -2; -1; -4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "6144",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-2; -2; 0; 0; -2; 0; -4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-4; -3; 3; 0; 0; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-3; -5; -5; -3; -1; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1125",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-4; 1; 4; -2; -4; 0; -1; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-5; -3; -2; -3; -2; -1; -4; -5; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_product [-1; 2; 3; -5; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-30",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "mem",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "mem",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 3 [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -5 [0; -5; -1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [2; 4; 4; 2; -5; -3; 2; -5; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -1 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -4 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem 1 [4; 1; -5; -5; -4; -5; 3; -5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -3 [-5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem -2 [0; 4; -3; 1; -4; 0; -3; -5; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_min",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_min",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" Liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-2; 3; 4; 2; -1; -4; 1; 1; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-3; -4; -4; 4; -5; 4; 0; 1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-3; -4; -5; 0; -5; 1; -1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [2; 4; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [0; -5; -2; 0; -5; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [-5; 2; -3; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min [1; -1; 1; -5; -4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_min []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" Liste vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "last",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "last",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"La liste ide n'a pas d'element\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [3; 0; 4; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [0; 0; -3; -4; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [0; 0; 3; -4; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-4; 3; -4; 2; 3; -2; -2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [1; -5; 3; -2; 2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [-2; -1; -4; -2; -4; 4; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"La liste ide n'a pas d'element\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last [3; 2; -1; 3; 1; -5; 2; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "last []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \"La liste ide n'a pas d'element\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1; 3; 2; 4; 5; 6]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [4; 1; 5; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-4; 1; -3; -4; -5; 1; 3; -4; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [2; 2; -5; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-5; 0; -3; 2; 4; 0; 2; 2; -2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [-1; -4; -3; 0; -2; 4; -5; -1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_sorted [2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "average",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "average",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" la Liste est vide \")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" la Liste est vide \")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" la Liste est vide \")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-5; 3; 1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-1; 1; -3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-1; 3; 1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-4; -2; 0; -3; 3; 4; 4; 0; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [-1; 1; -5; -4; -3; 3; -5; 1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "average [3; -5; 4; -1; 0; 4; 1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "nth",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "nth",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" La liste est vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-3; -4; -5] -3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" La liste est vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-3; 1; 0; 1; -1; 1; -5; -5] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [2; -3; -1; 2; 4] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-1; 1; 4; -1; -2; 3; -4; 0; -2] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [0; -2] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [] -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" La liste est vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [4] 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" La liste est vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-3; -1; -5; -4; 1; 4] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "nth [-1; -5; -2] 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Failure \" La liste est vide\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "range",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "range",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -1 -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -2; -3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 2 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1; 0; -1; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 3 -1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1; 0; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 2 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 2 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1; 0; -1; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 1 -2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 0; -1; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -1 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -3 -4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range 3 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "range -4 -5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1570028698.838053
    },
    "3.2_listes_poly": {
      "grade": 100,
      "solution": "(* Toutes les fonctions sont ici définies par des \"let rec\". Il est\n   possible que dans vos solutions certaines fonctions ne soient pas\n   récursives, car elles utilisent une fonction récursive auxiliaire\n   définie localement. À vous d'enlever le mot clef \"rec\" dans ce\n   cas. *)\n\nlet rec map f l = match l with\n    []-> []\n  |a::b -> f a :: (map f b);;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec filter p l = match l with\n    []-> []\n  |a::b -> \n      if(p a) then a:: filter p b\n      else filter p b;;\n\nlet rec append l1 l2 = match l1 with\n    []-> l2\n  |a::b -> a:: append b l2;;\n\"Remplacer cette chaîne par votre code\" ;;\nlet rec ajout_fin(l,e) = match l with\n    []   -> [e]\n  |p:: r -> p:: (ajout_fin(r,e));;\n\nlet rec rev l = match l with\n    []->[]\n  |a::b -> ajout_fin (rev b,a);; \n\nlet rec flatten l = match l with\n    []->[]\n  |a::b-> append a (flatten b);;\n\nlet rotation_d l =\n  let rec aux l1 acc = match l1 with\n      [] -> acc \n    | [x]-> [x] @ acc\n    |a::q -> aux q (acc @[a])\n  in aux l [] ;; \n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "map",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "map",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [-1; 1; -4; 0; -5; -3; 1; -4; 3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; 0; -5; -1; -6; -4; 0; -5; 2; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [2; 3; -3; -2; -1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 4; -2; -1; 0; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [-3; 1; 4; -4; 3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 0; 3; -5; 2; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [4; -4; 2; -2; -3; 4; 0; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5; -3; 3; -1; -2; 5; 1; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [0; -4; -5; 2; -1; -5; 4; -5; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -5; -6; 1; -2; -6; 3; -6; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [-4; -1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [-3; 0; -1; 3; -3; -1; 2; -3; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; -2; 2; -4; -2; 1; -4; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [2; -1; 3; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 0; 4; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map <fun> [1; -4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; -5; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "filter",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "filter",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [-3; -1; -5; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [2; 1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [4; 0; -2; -3; 2; -5; -1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [1; -1; -3; -3; 1; 0; -2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; -2; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [-4; 0; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [0; 0; -3; -4; -5; 0; 1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 0; -4; 0; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [2; 3; -2; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [-4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "filter <fun> [1; 3; -1; -5; 1; -4; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-4; -3; -4; 3; 4; -1] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -4; 3; 4; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-1; 2; 2; 3; 3; -5; 2; -1; -1] [0; 2; -1; 4; 4; 3; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 2; 2; 3; 3; -5; 2; -1; -1; 0; 2; -1; 4; 4; 3; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [2; 3; 0; 4] [3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 3; 0; 4; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-4] [-3; 3; 0; 2; 2; -5; 3; -3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; 3; 0; 2; 2; -5; 3; -3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [-1.83640030496072626; -2.01563323296654; 2.98223180915136421;\n   -4.6782809843339237; -4.86207164232312294; 0.985726455070495611;\n   0.298737478835375825; 0.71985475880847]\n  [-2.21837995093808571; -1.84042607472272701; -2.09135220413746037;\n   -0.211917170236306518; 1.47920079436160723; 2.72984668328046531]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1.83640030496072626; -2.01563323296654; 2.98223180915136421;\n -4.6782809843339237; -4.86207164232312294; 0.985726455070495611;\n 0.298737478835375825; 0.71985475880847; -2.21837995093808571;\n -1.84042607472272701; -2.09135220413746037; -0.211917170236306518;\n 1.47920079436160723; 2.72984668328046531]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [1.08636563133495656; 4.87411662269657775]\n  [-3.39662094310467744; 3.96273179385719665; -3.98321436580880484;\n   -3.07113364719102222; -0.212484435874796596; 3.82543494618500723;\n   2.6957848503702504]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1.08636563133495656; 4.87411662269657775; -3.39662094310467744;\n 3.96273179385719665; -3.98321436580880484; -3.07113364719102222;\n -0.212484435874796596; 3.82543494618500723; 2.6957848503702504]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [1.39146174696063074; 0.441932690664286199; 3.74663239197746734;\n   3.88617948605096331; -4.29299401360025179; -3.82555927178412691]\n  [4.359835069496377; -1.80897566580728641; -3.85956416138031511;\n   -0.111203763444462922; 0.422877394498941683]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1.39146174696063074; 0.441932690664286199; 3.74663239197746734;\n 3.88617948605096331; -4.29299401360025179; -3.82555927178412691;\n 4.359835069496377; -1.80897566580728641; -3.85956416138031511;\n -0.111203763444462922; 0.422877394498941683]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [3.14661427460950449]\n  [-3.23864418976701618; 1.22429397969860787; 0.859843254718363426;\n   0.158943302224620275; -0.255675556978283147; -4.3713460319747437;\n   -2.43750419212149882; 1.37111110040129; -1.07276058156074683]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3.14661427460950449; -3.23864418976701618; 1.22429397969860787;\n 0.859843254718363426; 0.158943302224620275; -0.255675556978283147;\n -4.3713460319747437; -2.43750419212149882; 1.37111110040129;\n -1.07276058156074683]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "rev",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rev",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-4; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-2; -1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -1; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-1; -5; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -5; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-2; 4; -1; 4; 4; -5; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -5; 4; 4; -1; 4; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [2; 4; -2; -4; 4; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 4; -4; -2; 4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-4; -5; -1; -1; 1; 3; 3; 1; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 4; 1; 3; 3; 1; -1; -1; -5; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [4; -5; 3; 0; -4; -4; 0; 0; -3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; -3; 0; 0; -4; -4; 0; 3; -5; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [4; -5; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; -5; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev [-2; -2; -1; 0; -3; -3; 4; -5; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -5; 4; -3; -3; 0; -1; -2; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "flatten",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "flatten",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[1; 2; 3]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[]; [3; 2; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[4; -3; -5; -5; 4; -5; -3; 0]; [-3; -3; 0; 1; 3; 3; -2; -4; -5; -3];\n   [-3; -5; 2; -1; 4; -5; 0]; [1; -5; 0; 3; -3; 0; -5; 1];\n   [-5; -2; -5; 4; 4; 4; -5]; [-1; -2; 0]; [-2; 2; 2; -5; 3; 4; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; -3; -5; -5; 4; -5; -3; 0; -3; -3; 0; 1; 3; 3; -2; -4; -5; -3; -3; -5; 2;\n -1; 4; -5; 0; 1; -5; 0; 3; -3; 0; -5; 1; -5; -2; -5; 4; 4; 4; -5; -1; -2; 0;\n -2; 2; 2; -5; 3; 4; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten\n  [[-3; -4; -5; -5; 3]; [-3; 1; 4; 0; -4; -5; -1; -3; -3];\n   [1; 2; 1; -4; -5; 0; 1; 0; -5; -5]; [0; -1; -1; 2; -5; 1; 2; -2; 2];\n   [4; 0; 2; -1; -3; 4]; [-4; 2; -5; 3; -5; 2; -3; -2; -1]; [-3; 4; 2]; \n   []; [0; -1; 0]; [-5; -2; -1; 2; 3; 1; 2; -1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -4; -5; -5; 3; -3; 1; 4; 0; -4; -5; -1; -3; -3; 1; 2; 1; -4; -5; 0; 1;\n 0; -5; -5; 0; -1; -1; 2; -5; 1; 2; -2; 2; 4; 0; 2; -1; -3; 4; -4; 2; -5; 3;\n -5; 2; -3; -2; -1; -3; 4; 2; 0; -1; 0; -5; -2; -1; 2; 3; 1; 2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[3]; [-3; 4; -4; 1; -4; 4; -1; -5]; [0; 3; 0]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -3; 4; -4; 1; -4; 4; -1; -5; 0; 3; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten [[-3; -2; -1; -1; 2; 0; 1; -5; -2; 3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; -1; 2; 0; 1; -5; -2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "flatten []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "rotation_d",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rotation_d",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [0; -1; -4; -4; -2; -1; -3; -3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 0; -1; -4; -4; -2; -1; -3; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [-1; -2; -4; 1; 2; -3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -1; -2; -4; 1; 2; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [3; -2; 4; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 3; -2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [4; 1; -4; 4; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 4; 1; -4; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rotation_d [2; 0; -1; 4; -1; 4; 2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 2; 0; -1; 4; -1; 4; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1569418215.1259
    },
    "3.3_listes_choix": {
      "grade": 100,
      "solution": "let rec taille l= match l with\n    []-> 0\n  |a::b -> 1+ taille b;;\n\nlet rec nbElement l x = match l with\n    []-> failwith \" Error\"\n  |a::b -> if(x=0) then a else nbElement b (x-1);;\n\nlet choose l =\n  nbElement l (Random.int (taille l));;\n\nlet rec appartient l x = match l with\n    []-> false;\n  |a::b-> if(x=a) then true else appartient b x;;\n\n\nlet supprimer l x = \n  let rec aux a b c= match a with\n      []->c\n    |t::q -> \n        if(t=b) then  c @ q\n        else aux q b (t::c) \n  in aux l x [];;\n\nlet choose_elements l n =\n  let rec aux a b acc= match b with\n      0 -> acc\n    |_->\n        let temp = choose a\n        in aux (supprimer a temp) (b-1) (temp::acc) \n  in aux l n [];;\n  ",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "choose",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "choose",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [3; 4; 4; 4; 3; 1; -3; -5; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-3; -4; 3; -5; -1; -5; -2; -4; 3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-1; 0; -4; -5; 3; 4; 2; 2; -3; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [0; 1; -1; -1; 2; -2; 1; 0; 1; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [4; -3; -2; -2; 1; -1; 2; 0; 4; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [2; 0; -3; -3; 3; 0; -2; -2; -5; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-2; -5; 4; 2; -2; -2; -5; 0; -3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-3; 3; 1; -5; -3; -1; 3; 4; 0; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [0; -2; -3; 4; -2; 3; 4; 4; 2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose [-3; 1; -5; -2; 1; 2; -3; 3; -3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "choose_elements",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "choose_elements",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-4; -4; -4; -2; -2; 2; 2; 2; 3; 3] 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; -4; -2; 2; -4; 2; -2; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -5; -5; -3; -2; -1; -1; 0; 2; 4] 6",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -5; 4; -5; 2; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -2; -2; -1; -1; -1; 1; 3; 4] 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; -2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -4; -2; -1; -1; 0; 2; 2; 4] 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 2; 2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -2; -2; -1; -1; 0; 0; 1; 2] 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-2; -2; -2; 0; 1; 2; 2; 4; 4; 4] 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 4; 4; 4; -2; 2; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -3; -2; -2; -2; 0; 0; 3; 3] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-5; -4; -3; -2; -1; 0; 0; 1; 2; 3] 7",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; -1; -3; 0; -2; -5; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-3; -2; -2; -1; -1; 1; 1; 1; 3; 4] 9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 1; -1; -1; 4; -2; -3; -2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "choose_elements [-4; -3; -3; -2; -1; -1; 1; 2; 3; 4] 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571930386.616663
    },
    "3.4_listes_sorting": {
      "grade": 100,
      "solution": "let rec insert x l = match l with\n    []->[x]\n  |a::b -> if (a>x) then x::l\n      else if (a==x) then l\n      else a::(insert x b);;\n\nlet rec sort l = match l with\n    []->[]\n  |[a]->[a]\n  |a::b -> insert a(sort b);;\n\nlet rec mem_sorted x l = match l with\n    []-> false\n  |a::b -> if(a=x) then true\n      else if (a>x) then false\n      else mem_sorted x b;;\n\nlet rec union_sorted l1 l2 = match l1 with\n    []-> l2\n  |a::b -> union_sorted b (insert a l2);;\nlet rec appartient x l= match l with\n    []-> false\n  |a::b ->if(a=x) then true else appartient x b;;  \nlet rec inter_sorted l1 l2 = match l1 with\n    []-> []\n  |t::q -> if(appartient t l2) then t::inter_sorted q l2 else inter_sorted q l2;; \n\nlet rec partition l x = match l with\n    []->[],[]\n  |a::b -> \n      let (l1,l2) = partition b x in \n      if a< x then ((a::l1), l2) else (l1,(a::l2));;\nlet rec quicksort l = match l with\n  |[]->[];\n  |a::q ->\n      let (l1,l2)=partition q a in\n      (quicksort l1)@(a::(quicksort l2));;\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "insert",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "insert",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -3 [-5; -4; -2; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 3 [-4; -3; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -1 [-3; -1; 0; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -1; 0; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 4 [-5; -4; -3; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 4 [2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 2 [-5; -4; -1; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -1; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 1 [-5; -3; -2; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 2 [-5; -4; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 2 [-5; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert -3 [-5; -4; -3; -2; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-2; -5; 2; -2; 0; 1; 4; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [2; 1; 2; -5; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [3; -1; -2; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [0; 4; -1; 1; 3; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [0; -3; -3; -3; -5; -5; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 0; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [0; 2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [3; 4; -2; 1; -2; 2; -2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-2; 1; -4; -2; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [3; -1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [4; -5; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 0; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "mem_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "mem_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -1 [-5; -4; -3; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 2 [-4; -1; 0; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 1 [-5; -4; -3; -2; -1; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -4 [-3; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -3 [-4; -3; -1; 0; 1; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 0 [-5; -3; -2; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -2 [-5; -4; -3; -2; -1; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 4 [-4; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted 1 [-5; -3; -1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "mem_sorted -5 [-4; -3; 1; 2; 4; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "union_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "union_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -2; -1; 0; 1; 2; 3; 4] [-4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-1; 1] [-5; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [] [-5; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [3] [-5; -4; -3; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -2] [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3; 1; 4] [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; 1; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; -2; 1; 2] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; 1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; 0; 2; 4] [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-1] [-5; -3; -2; -1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; -1; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [] [-4; -3; -2; -1; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -2; -1; 0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "inter_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "inter_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4; -3; -2; 0; 2; 3] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4; -3] [-5; -3; -2; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4] [-3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; 0; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4; -3; 2; 4] [-5; -1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -2; 4] [-5; -4; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -1; 0; 1; 2; 3; 4] [0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4; -2; -1; 0; 2] [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; -1; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-3; -2; -1; 0; 1; 2; 3; 4] [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-5; -3; -2; 0; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-5; -4; -3; -2; -1; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "quicksort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "quicksort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [2; 3; -2; 3; 1; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; 1; 2; 3; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; 3; -5; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [0; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [2; -4; -2; 4; 4; 3; -5; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -2; 2; 3; 4; 4; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; -4; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; 3; 1; -1; 0; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; -1; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; -5; -5; -2; -5; 1; -5; -3; -2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -5; -5; -5; -3; -2; -2; -1; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "quicksort [-1; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1569516958.534335
    },
    "4.1_arbres": {
      "grade": 100,
      "solution": "let rec size a = match a with\n    Nil -> 0\n  |Node(_,c,b)-> 1 + size c + size b;;\n\n\nlet rec depth a = match a with\n    Nil -> 0\n  |Node(_,c,b)-> 1 + max (depth c) (depth b);;\n\n\nlet rec sum a = match a with\n    Nil-> 0\n  |Node(x,a,b) -> x+ sum a +sum b;;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec contains x a = match a with\n    Nil -> false \n  |Node(r,b,c)-> \n      if(r=x) then true \n      else (contains x b) || (contains x c);;  \n      \nlet rec elements a =match a with\n    Nil ->[]\n  |Node(x,g,d) -> elements g @[x]@ elements d;;\n\"Remplacer cette chaîne par votre code\" ;;\n\nlet rec perfect a = match a with\n    Nil -> true\n  |Node(_,x,y) -> if(depth x != depth y) then false\n      else perfect x && perfect y;;\n\"Remplacer cette chaîne par votre code\" ;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "size",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (-2, Nil, Node (0, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (2, Node (-3, Node (-3, Nil, Nil), Node (-5, Nil, Nil)),\n    Node (-1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (-4, Nil,\n    Node (0, Nil,\n     Node (2, Nil,\n      Node (-5, Node (-4, Nil, Nil),\n       Node (0, Node (-1, Node (-3, Nil, Node (-4, Nil, Nil)), Nil), Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (2,\n    Node (0, Node (-1, Nil, Node (3, Nil, Nil)),\n     Node (2, Node (4, Nil, Nil), Node (0, Nil, Nil))),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (3, Node (0, Nil, Node (-2, Node (-3, Nil, Nil), Nil)),\n    Node (-3, Node (-4, Nil, Nil),\n     Node (1, Node (-5, Nil, Nil), Node (3, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (2, Node (4, Node (3, Nil, Nil), Nil),\n    Node (-5, Node (2, Node (-4, Nil, Nil), Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node (-4,\n    Node (2, Nil, Node (0, Node (-5, Nil, Nil), Node (2, Nil, Nil))),\n    Node (1, Node (-5, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size (Node (4, Nil, Node (1, Node (-2, Nil, Node (0, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "depth",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "depth",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-2, Node (3, Nil, Node (-1, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-4, Node (-4, Nil, Nil), Node (-1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-5, Nil, Node (4, Node (1, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth\n  (Node (3, Node (-3, Nil, Node (1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Nil, Node (0, Nil, Node (1, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (3, Node (-5, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-3, Node (4, Nil, Nil), Node (-3, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (1, Node (1, Node (4, Node (-3, Nil, Nil), Nil), Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "4",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "depth (Node (-1, Node (-3, Nil, Nil), Node (-5, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-5, Node (-3, Node (2, Nil, Node (-3, Nil, Nil)), Nil),\n    Node (-4, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-13",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-5,\n    Node (-2, Node (-2, Nil, Node (2, Nil, Node (2, Nil, Nil))), Nil),\n    Node (-5, Nil, Node (-3, Nil, Node (2, Node (-1, Nil, Nil), Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-12",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-5, Node (-3, Node (-5, Nil, Nil), Nil),\n    Node (3, Node (-1, Nil, Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-14",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (0, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-2,\n    Node (-4, Node (3, Nil, Nil), Node (-5, Node (-2, Nil, Nil), Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-10",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (0, Nil,\n    Node (-5,\n     Node (1, Node (-5, Node (-3, Nil, Nil), Nil), Node (0, Nil, Nil)),\n     Node (-1, Nil, Node (-1, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-14",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (-3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-4, Node (-2, Nil, Nil),\n    Node (3, Node (3, Nil, Nil), Node (2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (3, Node (-5, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-2",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum\n  (Node (-4, Node (2, Nil, Node (-1, Node (-5, Nil, Nil), Nil)),\n    Node (-5, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-13",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "contains",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "contains",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains -1 (Node (-1, Node (-2, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  2\n  (Node (-5, Node (4, Nil, Nil),\n    Node (-2,\n     Node (2, Nil, Node (4, Node (1, Nil, Nil), Node (-1, Nil, Nil))),\n     Node (3, Nil, Node (-1, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  1\n  (Node (3, Nil,\n    Node (3, Node (-4, Nil, Node (-4, Nil, Node (0, Nil, Nil))),\n     Node (-2, Nil, Node (0, Node (-5, Node (-1, Nil, Nil), Nil), Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -1\n  (Node (-4,\n    Node (-1, Node (2, Nil, Node (1, Nil, Nil)),\n     Node (-1, Node (1, Nil, Node (-3, Nil, Nil)), Nil)),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains 1 (Node (-1, Node (0, Nil, Nil), Node (1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -4\n  (Node (-3, Node (-5, Nil, Nil), Node (1, Nil, Node (-5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  0\n  (Node (2, Nil,\n    Node (4, Nil, Node (2, Nil, Node (-1, Nil, Node (-5, Nil, Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  -4\n  (Node (4, Nil, Node (4, Node (-5, Nil, Nil), Node (-4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  0\n  (Node (3, Node (-1, Nil, Nil), Node (-2, Nil, Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains\n  5\n  (Node (-5,\n    Node (1, Node (-5, Nil, Node (-4, Node (-5, Nil, Nil), Nil)), Nil),\n    Node (3, Node (-4, Nil, Node (4, Nil, Nil)), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "elements",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "elements",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-2, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (-4, Node (-5, Nil, Nil),\n    Node (0, Node (-1, Nil, Node (4, Nil, Nil)), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -1; 4; 0; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (4, Nil, Node (-2, Nil, Node (-3, Node (1, Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; -2; 1; -3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (3, Node (-4, Nil, Nil),\n    Node (3, Nil,\n     Node (-1, Node (4, Node (0, Nil, Nil), Node (0, Nil, Nil)), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 3; 3; 0; 4; 0; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (-3, Node (-5, Node (0, Nil, Node (-4, Nil, Nil)), Nil),\n    Node (1, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; -4; -5; -3; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-2, Node (-1, Node (2, Nil, Nil), Nil), Node (3, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -1; -2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements\n  (Node (-2,\n    Node (-5, Nil,\n     Node (2, Node (0, Nil, Nil), Node (3, Node (2, Nil, Nil), Nil))),\n    Node (-1, Nil, Node (4, Nil, Node (1, Nil, Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 0; 2; 2; 3; -2; -1; 4; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "elements (Node (-5, Node (-2, Nil, Nil), Node (-4, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -5; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "perfect",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "perfect",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-5,\n    Node (1, Node (-5, Node (0, Nil, Nil), Nil), Node (-3, Nil, Nil)), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect (Node (0, Nil, Node (2, Node (-4, Nil, Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect (Node (-3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (2, Node (3, Node (0, Nil, Nil), Node (0, Nil, Nil)),\n    Node (-2, Node (4, Nil, Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (3,\n    Node (-5, Node (-2, Nil, Node (4, Nil, Node (-1, Nil, Nil))),\n     Node (3, Nil, Nil)),\n    Node (-5, Node (3, Nil, Nil), Node (2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-3,\n    Node (-5,\n     Node (-5, Node (-3, Node (2, Nil, Nil), Node (-1, Nil, Nil)),\n      Node (0, Node (3, Nil, Nil), Node (3, Nil, Nil))),\n     Node (1, Node (0, Node (2, Nil, Nil), Node (-1, Nil, Nil)),\n      Node (-5, Node (-2, Nil, Nil), Node (-5, Nil, Nil)))),\n    Node (0,\n     Node (3, Node (4, Node (-4, Nil, Nil), Node (-2, Nil, Nil)),\n      Node (4, Node (3, Nil, Nil), Node (1, Nil, Nil))),\n     Node (1, Node (-3, Node (-1, Nil, Nil), Node (-3, Nil, Nil)),\n      Node (-3, Node (0, Nil, Nil), Node (0, Nil, Nil))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "perfect\n  (Node (-2,\n    Node (3, Node (-4, Node (-3, Nil, Nil), Node (3, Nil, Nil)),\n     Node (-3, Node (4, Nil, Nil), Node (-4, Nil, Nil))),\n    Node (1, Node (-5, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1570622059.052289
    },
    "4.2_arbres_abr": {
      "grade": 88,
      "solution": "let rec size a = match a with\n    Nil -> 0\n  |Node(_,c,b)-> 1 + size c + size b;;\n\nlet rec contains_bst x a = match a with\n  |Nil -> false\n  |Node(b,g,d) ->\n      if(x=b) then true\n      else if (x>b) then contains_bst x d\n      else contains_bst x g;;\n\nlet rec add_bst x a = match a with\n    Nil -> Node(x,Nil,Nil)\n  |Node(r,g,d)->\n      if( contains_bst x a) then a\n      else if(x>r) then Node(r,g, add_bst x d)\n      else Node(r,add_bst x g, d);;\n      \nlet rec bst_of_list l = match l with\n  |[]-> Nil\n  |a::b -> add_bst a (bst_of_list b);;\n\nlet divise l = \n  let rec aux i acc = function\n      [] -> List.rev acc, []\n    | h :: t as l -> if i=0 then List.rev acc,l\n        else aux (i-1) (h::acc) t in \n  aux ((List.length l) /2) [] l;;\n\nlet rec bst_of_list_opt l = match l with\n    []-> Nil\n  |t::q -> add_bst t (bst_of_list_opt q);;\n\n\n\n\nlet rec est_triee l= match l with\n    []|[_]-> true\n  |a::y::q ->  a<=y && est_triee (y::q);; \n\nlet rec elements a = match a with\n    Nil ->[]\n  |Node(x,y,z) -> elements y @[x]@ elements z;;\n\nlet is_bst a = est_triee (elements a);; \n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "contains_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "contains_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -2\n  (Node (3,\n    Node (-4, Node (2, Node (4, Nil, Nil), Nil),\n     Node (-5, Node (-1, Nil, Nil), Nil)),\n    Node (-3, Node (0, Node (1, Nil, Nil), Nil), Node (-2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -3\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -3\n  (Node (-1,\n    Node (1, Node (4, Node (3, Nil, Nil), Nil),\n     Node (-5, Node (-4, Nil, Nil), Nil)),\n    Node (2, Node (-2, Node (0, Nil, Nil), Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -2\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -4\n  (Node (1,\n    Node (2, Node (-3, Node (-4, Nil, Nil), Nil),\n     Node (-5, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (4, Node (0, Nil, Nil), Nil), Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -3\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  1\n  (Node (2,\n    Node (-2, Node (-5, Node (4, Nil, Nil), Nil),\n     Node (0, Node (1, Nil, Nil), Nil)),\n    Node (3, Node (-1, Node (-4, Nil, Nil), Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -4\n  (Node (3,\n    Node (-3, Node (1, Node (-1, Nil, Nil), Nil),\n     Node (-5, Node (4, Nil, Nil), Nil)),\n    Node (2, Node (-4, Node (-2, Nil, Nil), Nil), Node (0, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  -1\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "contains_bst\n  3\n  (Node (3,\n    Node (2, Node (-1, Node (1, Nil, Nil), Nil),\n     Node (0, Node (-5, Nil, Nil), Nil)),\n    Node (-2, Node (4, Node (-3, Nil, Nil), Nil), Node (-4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "add_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "add_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst -1 Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 2 (Node (-1, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst -1 (Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst -1 (Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 4 (Node (-1, Nil, Node (2, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Nil, Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst -5 (Node (-1, Nil, Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst\n  -1\n  (Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst 4 (Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst\n  -2\n  (Node (-1, Node (-5, Nil, Nil), Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Node (-2, Nil, Nil)),\n  Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_bst\n  0\n  (Node (-1, Node (-5, Nil, Node (-2, Nil, Nil)),\n    Node (2, Nil, Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-5, Nil, Node (-2, Nil, Nil)),\n  Node (2, Node (0, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "bst_of_list",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bst_of_list",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-2; -2; -3; 3; -1; -2; 0; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (4,\n  Node (0, Node (-2, Node (-3, Nil, Nil), Node (-1, Nil, Nil)),\n   Node (3, Nil, Nil)),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [0; 4; 4; -4; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (3, Node (1, Node (-4, Nil, Node (0, Nil, Nil)), Nil),\n  Node (4, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (2, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-5; -2; -2; 0; -3; -2; 0; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-3, Node (-5, Nil, Nil), Node (0, Node (-2, Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-2; 4; 4; -4; -5; -2; 1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-4, Node (-5, Nil, Nil),\n  Node (1, Node (-2, Nil, Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [0; -3; 3; 3; 2; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-1, Node (-3, Nil, Nil),\n  Node (2, Node (0, Nil, Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-3, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list [-4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "bst_of_list_opt",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "bst_of_list_opt",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-4; -3; -2; 0; 1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (3,\n  Node (2,\n   Node (1,\n    Node (0, Node (-2, Node (-3, Node (-4, Nil, Nil), Nil), Nil), Nil), Nil),\n   Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-4; -3; -2; 0; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (2, Node (0, Node (-2, Node (-3, Node (-4, Nil, Nil), Nil), Nil), Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [0; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (3, Node (0, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (-2, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (4,\n  Node (3,\n   Node (2,\n    Node (1,\n     Node (-1,\n      Node (-2, Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Nil), Nil),\n      Nil),\n     Nil),\n    Nil),\n   Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 0; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (4,\n  Node (3,\n   Node (2,\n    Node (1,\n     Node (0,\n      Node (-1,\n       Node (-2, Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Nil), Nil),\n       Nil),\n      Nil),\n     Nil),\n    Nil),\n   Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -3; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (4, Node (3, Node (2, Node (-3, Node (-5, Nil, Nil), Nil), Nil), Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt [-5; -4; -3; -2; -1; 1; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Node (4,\n  Node (3,\n   Node (2,\n    Node (1,\n     Node (-1,\n      Node (-2, Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Nil), Nil),\n      Nil),\n     Nil),\n    Nil),\n   Nil),\n  Nil))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "bst_of_list_opt []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_bst",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_bst",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-1,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Node (-2, Nil, Nil)),\n    Node (2, Node (1, Node (0, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (1, Node (-3, Node (0, Nil, Nil), Nil),\n     Node (4, Node (-2, Nil, Nil), Nil)),\n    Node (2, Node (-2, Node (2, Nil, Nil), Nil), Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (4,\n    Node (0, Node (-5, Node (-3, Nil, Nil), Nil),\n     Node (4, Node (1, Nil, Nil), Nil)),\n    Node (-4, Node (-5, Node (1, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-1,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil), Node (-2, Nil, Nil)),\n    Node (2, Node (1, Node (0, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-2,\n    Node (-5, Node (-4, Node (2, Nil, Nil), Nil),\n     Node (4, Node (-4, Nil, Nil), Nil)),\n    Node (4, Node (-3, Node (-4, Nil, Nil), Nil), Node (3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-4,\n    Node (-1, Node (-2, Node (0, Nil, Nil), Nil),\n     Node (2, Node (3, Nil, Nil), Nil)),\n    Node (3, Node (3, Node (-1, Nil, Nil), Nil), Node (-3, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst (Node (2, Node (-3, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (-3,\n    Node (1, Node (-3, Node (3, Nil, Nil), Nil),\n     Node (3, Node (-4, Nil, Nil), Nil)),\n    Node (2, Node (-2, Node (-2, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_bst\n  (Node (0,\n    Node (-3, Node (-4, Node (-5, Nil, Nil), Nil),\n     Node (-1, Node (-2, Nil, Nil), Nil)),\n    Node (3, Node (2, Node (1, Nil, Nil), Nil), Node (4, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571930548.396735
    },
    "4.3_arbres_poly": {
      "grade": 100,
      "solution": "let rec forall_labels p a = match a with\n  |Nil ->true\n  |Node(x,g,d) -> \n      if(p x = false) then false\n      else forall_labels p g && forall_labels p d;;\n\"Remplacez cette chaîne par votre code\" ;;\n\nlet is_uniform x a =\n  forall_labels (fun y -> if y=x then true else false) a;;\n\"Remplacez cette chaîne par votre code\" ;;\n\nlet rec forall_subtrees pn a = match a with\n  |Nil -> true\n  |Node(x,g,d) ->\n      if( pn x g d = false) then false\n      else (forall_subtrees pn g )&& (forall_subtrees pn d);;\n\nlet rec is_right_comb a = match a with\n    Nil -> true\n  |Node (_,g,d) -> if g=Nil then is_right_comb d else false;;\n  \nlet rec sum a= match a with\n    Nil -> 0\n  |Node(x,g,d) -> x+ sum g + sum d;;\n\nlet rec map_tree f a = match a with\n    Nil -> Nil\n  |Node(x,g,d) -> Node(f x, map_tree f g, map_tree f d);;\n\"Remplacez cette chaîne par votre code\" ;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "forall_labels",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_labels",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\235', Node ('*', Nil, Nil),\n    Node ('\\154',\n     Node ('\\204',\n      Node ('\\161', Nil, Node ('\\130', Nil, Node ('\\131', Nil, Nil))),\n      Node ('\\014', Nil, Node ('E', Nil, Nil))),\n     Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\187',\n    Node ('\\024', Node ('\\229', Nil, Nil),\n     Node ('\\188', Nil, Node ('\\215', Nil, Nil))),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels <fun> (Node ('\\233', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('g', Node ('\\203', Nil, Nil),\n    Node ('\\195', Nil,\n     Node ('}', Node ('\\234', Nil, Nil),\n      Node ('\\216', Node ('\\159', Nil, Nil), Nil)))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node ('\\212',\n    Node ('^',\n     Node ('B', Node ('@', Nil, Node ('\\171', Nil, Nil)),\n      Node ('l', Nil, Node ('\\240', Nil, Nil))),\n     Nil),\n    Node ('X', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_labels",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (6, Node (5, Nil, Nil),\n    Node (5, Node (-9, Nil, Nil), Node (0, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (0,\n    Node (6, Node (-3, Nil, Node (6, Nil, Nil)),\n     Node (-2, Nil,\n      Node (0, Node (2, Nil, Nil), Node (-3, Nil, Node (5, Nil, Nil))))),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (6, Node (9, Node (8, Nil, Node (-9, Nil, Nil)), Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels <fun> (Node (4, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_labels\n  <fun>\n  (Node (4,\n    Node (-6, Node (-9, Nil, Nil), Node (2, Nil, Node (-10, Nil, Nil))), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_uniform",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform 'C' Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform 'C' (Node ('C', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform 'C' (Node ('C', Nil, Node ('C', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform true (Node (true, Node (false, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (false, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_uniform",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (false, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform true Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_uniform false Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "forall_subtrees",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_subtrees",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees\n  <fun>\n  (Node ('t', Node ('n', Node ('\\030', Nil, Nil), Nil),\n    Node ('\\138', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "forall_subtrees",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "forall_subtrees <fun> (Node (true, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "is_right_comb",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "is_right_comb",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb (Node ((), Nil, Node ((), Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb\n  (Node ((), Nil, Node ((), Node ((), Nil, Nil), Node ((), Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb (Node ((), Node ((), Nil, Nil), Node ((), Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "is_right_comb Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "sum",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sum",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "0",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (7, Nil, Node (-4, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (0, Nil, Node (-7, Nil, Node (-1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "-8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sum (Node (3, Nil, Node (-3, Nil, Node (1, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "map_tree",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "map_tree",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('\\n', Node ('E', Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (10, Node (69, Nil, Nil), Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> Nil",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "Nil",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree\n  <fun>\n  (Node ('\\182', Nil,\n    Node ('\\024', Node ('\\160', Nil, Nil), Node ('\\242', Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (182, Nil, Node (24, Node (160, Nil, Nil), Node (242, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('\\195', Nil, Node ('Q', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (195, Nil, Node (81, Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "map_tree <fun> (Node ('z', Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Node (122, Nil, Nil))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571929392.59682
    },
    "5.1_calcul_prop": {
      "grade": 100,
      "solution": "let rec string_of_formula f = match f with\n  |Var x -> x\n  |Neg f -> \" Neg \" ^  (string_of_formula f )\n  |And(f1,f2) -> \"(\" ^ (string_of_formula f1)^ \" And \"^(string_of_formula f2)^\")\"\n  |Or(f1,f2) ->\"(\"^(string_of_formula f1)^\" Or \" ^(string_of_formula f2)^\")\"\n;;\n \n\"Remplacer cette chaîne par votre code\"\nlet rec union_s l1 l2 = \n  if List.length l1 =0 then l2\n  else if List.length l2=0 then l1\n  else if List.hd l1 < List.hd l2 then List.hd l1 :: union_s (List.tl l1) l2\n  else if List.hd l1 = List.hd l2 then union_s (List.tl l1) l2\n  else List.hd l2 :: union_s l1 (List.tl l2);;\n\nlet rec list_of_vars f = match f with\n  |Var x -> [x] \n  |Neg f -> list_of_vars f\n  |And (f1,f2) -> union_s (list_of_vars f1) (list_of_vars f2)\n  |Or(f1,f2) -> union_s (list_of_vars f1) (list_of_vars f2);;\n\"Remplacer cette chaîne par votre code\"\n\nlet rec eval_formula f l = match f with\n    Var s -> (List.assoc s l)\n  |Neg f ->not( eval_formula f l)\n  |Or(f1,f2) -> (eval_formula f1 l) || (eval_formula f2 l)\n  |And (f1,f2) -> (eval_formula f1 l) && (eval_formula f2 l);;\n\"Remplacer cette chaîne par votre code\"\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "string_of_formula",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "string_of_formula",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Neg (Neg (Or (And (Var \"f\", Var \"w\"), Var \"p\"))),\n    Or (And (Or (Var \"m\", Var \"g\"), Var \"t\"),\n     And (And (Var \"o\", Var \"b\"), Or (Var \"i\", Var \"o\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"( Neg  Neg ((f And w) Or p) Or (((m Or g) And t) Or ((o And b) And (i Or o))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Neg (And (Or (Var \"n\", Var \"l\"), Or (Neg (Var \"k\"), Var \"z\"))),\n    And (Neg (And (Neg (Var \"c\"), Var \"n\")), Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"( Neg ((n Or l) And ( Neg k Or z)) And ( Neg ( Neg c And n) And h))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (And\n      (Neg\n        (Neg\n          (And (Var \"k\", Neg (Neg (Neg (Or (Var \"r\", Neg (Neg (Var \"k\"))))))))),\n      Var \"t\"),\n    And (Or (Var \"i\", Var \"s\"), Neg (Or (Var \"p\", Var \"i\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(( Neg  Neg (k And  Neg  Neg  Neg (r Or  Neg  Neg k)) And t) And ((i Or s) And  Neg (p Or i)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Or (And (Or (Var \"o\", And (Var \"x\", Var \"z\")), Var \"e\"),\n      Or (Var \"p\", And (Var \"c\", Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" Neg (((o Or (x And z)) And e) Or (p Or (c And l)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (Neg\n      (Or (And (Or (Or (Neg (Var \"j\"), Var \"l\"), Var \"h\"), Var \"n\"), Var \"d\")),\n    Neg (Or (Neg (Var \"i\"), Neg (Var \"x\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"( Neg (((( Neg j Or l) Or h) And n) Or d) And  Neg ( Neg i Or  Neg x))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Neg (Neg (Or (And (Var \"m\", Var \"i\"), Neg (Var \"x\")))),\n    And\n     (Neg\n       (Or (Or (Neg (And (Var \"b\", Var \"g\")), Var \"x\"),\n         Neg\n          (Or (Var \"n\",\n            Neg (Or (Or (Var \"q\", Var \"j\"), And (Var \"a\", Var \"h\"))))))),\n     Neg (Var \"x\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"( Neg  Neg ((m And i) Or  Neg x) And ( Neg (( Neg (b And g) Or x) Or  Neg (n Or  Neg ((q Or j) Or (a And h)))) And  Neg x))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (And (Neg (Neg (Neg (Or (Neg (Neg (Var \"v\")), Var \"k\")))),\n      Or (Var \"j\", Var \"m\")),\n    And (Var \"f\",\n     And\n      (And\n        (Neg\n          (And\n            (Or (And (Var \"l\", Var \"x\"),\n              And (Var \"j\", Neg (Or (Var \"p\", Var \"u\")))),\n            Var \"c\")),\n        And (Var \"o\", And (Var \"r\", Var \"o\"))),\n      Var \"k\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(( Neg  Neg  Neg ( Neg  Neg v Or k) And (j Or m)) And (f And (( Neg (((l And x) Or (j And  Neg (p Or u))) And c) And (o And (r And o))) And k)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Var \"b\",\n    And\n     (And (Neg (Neg (Neg (And (Var \"z\", And (Var \"k\", Var \"e\"))))),\n       Neg (Var \"y\")),\n     And (Var \"a\",\n      Neg\n       (Or (Or (Neg (Or (Var \"t\", Var \"p\")), And (Neg (Var \"y\"), Var \"h\")),\n         Or (Or (Var \"e\", Neg (Neg (And (Var \"q\", And (Var \"w\", Var \"l\"))))),\n          And (Neg (And (Var \"k\", Var \"r\")), Neg (Var \"d\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(b Or (( Neg  Neg  Neg (z And (k And e)) And  Neg y) And (a And  Neg (( Neg (t Or p) Or ( Neg y And h)) Or ((e Or  Neg  Neg (q And (w And l))) Or ( Neg (k And r) And  Neg d))))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Or (Neg (Var \"r\"), Neg (Var \"h\")),\n    Or (Or (And (Var \"p\", Var \"g\"), Var \"p\"), And (Var \"d\", Var \"s\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(( Neg r Or  Neg h) And (((p And g) Or p) Or (d And s)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or\n    (And\n      (And (Neg (And (Var \"i\", And (Var \"m\", Var \"b\"))),\n        Or\n         (And (And (Var \"f\", Var \"k\"), And (Or (Var \"c\", Var \"v\"), Var \"t\")),\n         Or (Var \"z\", Or (Var \"h\", Neg (Neg (Var \"q\")))))),\n      Neg\n       (Neg\n         (And\n           (Neg\n             (Neg\n               (Or (And (Neg (Var \"z\"), Var \"k\"),\n                 Neg (Or (Var \"y\", Var \"n\"))))),\n           And (And (Neg (Var \"i\"), Var \"m\"), Or (Var \"d\", Var \"i\")))))),\n    Var \"v\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((( Neg (i And (m And b)) And (((f And k) And ((c Or v) And t)) Or (z Or (h Or  Neg  Neg q)))) And  Neg  Neg ( Neg  Neg (( Neg z And k) Or  Neg (y Or n)) And (( Neg i And m) And (d Or i)))) Or v)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Var \"d\",\n    And\n     (Or (Neg (Var \"u\"),\n       Or (Var \"e\",\n        Neg (Or (And (Var \"a\", Var \"n\"), Or (Var \"c\", Neg (Var \"n\")))))),\n     Or (Var \"g\", And (Or (Var \"i\", Var \"p\"), Var \"s\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(d Or (( Neg u Or (e Or  Neg ((a And n) Or (c Or  Neg n)))) And (g Or ((i Or p) And s))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (Or (And (Var \"w\", Var \"h\"), Var \"o\"),\n    And (Var \"x\",\n     Or (And (Or (Var \"m\", Var \"a\"), Neg (Var \"o\")),\n      And (And (Neg (Neg (Var \"u\")), Var \"u\"),\n       And (Var \"y\", Or (Var \"m\", Var \"d\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(((w And h) Or o) Or (x And (((m Or a) And  Neg o) Or (( Neg  Neg u And u) And (y And (m Or d))))))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or (And (Var \"t\", Neg (Var \"x\")),\n    Neg\n     (Neg\n       (Neg\n         (Neg\n           (And\n             (And (Or (Var \"h\", Neg (Neg (Var \"z\"))),\n               Or (Var \"u\", Neg (Var \"w\"))),\n             Var \"n\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"((t And  Neg x) Or  Neg  Neg  Neg  Neg (((h Or  Neg  Neg z) And (u Or  Neg w)) And n))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Var \"t\",\n    Or (Or (Var \"a\", And (Var \"v\", Var \"s\")), Neg (And (Var \"m\", Var \"v\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(t And ((a Or (v And s)) Or  Neg (m And v)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Or\n    (Neg\n      (Or (Neg (Neg (Neg (Var \"x\"))),\n        Neg\n         (Or (And (Or (Var \"a\", And (Var \"f\", Var \"n\")), Var \"p\"), Var \"t\")))),\n    Neg (Or (And (Neg (Var \"h\"), Var \"m\"), Var \"v\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"( Neg ( Neg  Neg  Neg x Or  Neg (((a Or (f And n)) And p) Or t)) Or  Neg (( Neg h And m) Or v))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Neg\n      (Or\n        (Or (And (And (Var \"r\", Var \"m\"), Var \"q\"),\n          And\n           (And (Var \"a\",\n             And (And (Var \"s\", Var \"b\"), And (Var \"n\", Var \"f\"))),\n           And (And (Var \"c\", Var \"y\"), Neg (Var \"v\")))),\n        And (Var \"g\", Neg (And (Var \"z\", Var \"e\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" Neg  Neg ((((r And m) And q) Or ((a And ((s And b) And (n And f))) And ((c And y) And  Neg v))) Or (g And  Neg (z And e)))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And\n    (And (Or (Var \"l\", Neg (And (Var \"r\", Var \"g\"))),\n      Or (Or (And (Var \"t\", Var \"e\"), Var \"g\"), Var \"o\")),\n    Or (Neg (Var \"s\"), Var \"f\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(((l Or  Neg (r And g)) And (((t And e) Or g) Or o)) And ( Neg s Or f))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (And\n      (Or\n        (And (And (Or (Var \"o\", Var \"q\"), Var \"z\"),\n          Neg (And (Neg (Var \"n\"), And (Var \"r\", And (Var \"k\", Var \"x\"))))),\n        And (Var \"d\", And (Or (Neg (Var \"u\"), Var \"u\"), Var \"v\"))),\n      Neg (Neg (Or (And (Or (Var \"a\", Var \"y\"), Neg (Var \"z\")), Var \"y\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" Neg (((((o Or q) And z) And  Neg ( Neg n And (r And (k And x)))) Or (d And (( Neg u Or u) And v))) And  Neg  Neg (((a Or y) And  Neg z) Or y))\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (Neg\n    (Or\n      (And\n        (And\n          (Or (And (Neg (Neg (And (Var \"x\", Var \"s\"))), Var \"z\"),\n            Neg (Var \"z\")),\n          Var \"z\"),\n        Neg (Or (Var \"d\", And (Var \"a\", Var \"b\")))),\n      Neg (Var \"k\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\" Neg ((((( Neg  Neg (x And s) And z) Or  Neg z) And z) And  Neg (d Or (a And b))) Or  Neg k)\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "string_of_formula\n  (And (Or (And (Var \"v\", Var \"m\"), Or (And (Var \"h\", Var \"e\"), Var \"m\")),\n    And\n     (Or\n       (Neg\n         (And\n           (And (Neg (And (Or (And (Var \"o\", Var \"i\"), Var \"p\"), Var \"b\")),\n             Or (Var \"j\", Var \"l\")),\n           Or (Var \"t\", Var \"s\"))),\n       Or (Neg (Var \"n\"), Or (Neg (Var \"a\"), Var \"y\"))),\n     Neg (Var \"i\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"(((v And m) Or ((h And e) Or m)) And (( Neg (( Neg (((o And i) Or p) And b) And (j Or l)) And (t Or s)) Or ( Neg n Or ( Neg a Or y))) And  Neg i))\"",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "list_of_vars",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "list_of_vars",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And (Or (Neg (Var \"w\"), Or (Neg (Var \"q\"), Var \"w\")),\n    And (And (Var \"u\", Or (Var \"w\", Or (Var \"o\", Var \"a\"))),\n     Neg\n      (Neg\n        (Neg\n          (And\n            (And\n              (Or (Or (Var \"r\", And (Var \"d\", Var \"u\")),\n                And (Var \"z\", Var \"p\")),\n              Var \"c\"),\n            Or (And (And (Or (Var \"n\", Var \"m\"), Var \"f\"), Var \"h\"),\n             And (And (Var \"d\", Var \"a\"), Var \"k\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"c\"; \"d\"; \"f\"; \"h\"; \"k\"; \"m\"; \"n\"; \"o\"; \"p\"; \"q\"; \"r\"; \"u\"; \"w\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or\n    (And\n      (Or\n        (Neg\n          (Neg\n            (Or\n              (And (Or (Var \"h\", Or (Var \"l\", Var \"r\")), Neg (Neg (Var \"k\"))),\n              Or (Var \"x\", Var \"b\")))),\n        Or (Var \"f\", Var \"t\")),\n      Neg (Var \"s\")),\n    Or (Or (And (Var \"i\", And (Var \"h\", Or (Var \"n\", Var \"l\"))), Var \"t\"),\n     And (Or (Var \"z\", Or (Or (Var \"w\", Var \"x\"), Var \"o\")), Var \"o\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"f\"; \"h\"; \"i\"; \"k\"; \"l\"; \"n\"; \"o\"; \"r\"; \"s\"; \"t\"; \"w\"; \"x\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or\n    (Neg\n      (Or (Or (Var \"p\", Or (Or (And (Var \"b\", Var \"i\"), Var \"x\"), Var \"b\")),\n        And (Neg (And (Var \"x\", Var \"p\")), Var \"x\"))),\n    Neg (Neg (Neg (Var \"o\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"i\"; \"o\"; \"p\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg (Or (Neg (Var \"e\"), Neg (Or (And (Var \"l\", Var \"p\"), Var \"n\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"e\"; \"l\"; \"n\"; \"p\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (And (Or (Neg (Neg (Var \"i\")), Var \"s\"),\n      Or (Var \"b\",\n       And (Neg (Neg (And (Var \"z\", Var \"t\"))),\n        Or (Neg (Neg (Or (Neg (Var \"i\"), Var \"s\"))), Var \"a\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"b\"; \"i\"; \"s\"; \"t\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And\n    (Or (Or (Var \"d\", Neg (Var \"u\")),\n      Or (Or (Var \"c\", And (Var \"l\", Or (Var \"r\", Var \"k\"))),\n       Or (Var \"o\", Var \"l\"))),\n    And (Var \"o\", Neg (And (Neg (Var \"x\"), Neg (Or (Var \"p\", Var \"j\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"c\"; \"d\"; \"j\"; \"k\"; \"l\"; \"o\"; \"p\"; \"r\"; \"u\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (Neg\n      (Or (Or (Var \"w\", Neg (Var \"s\")),\n        Or (Var \"g\", Or (Neg (Var \"p\"), Or (Var \"u\", Var \"w\")))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"g\"; \"p\"; \"s\"; \"u\"; \"w\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (Or\n      (And (And (And (Var \"a\", Var \"g\"), Neg (Var \"k\")),\n        And (Var \"q\", Neg (Var \"x\"))),\n      Or (Or (Or (Var \"r\", Or (Var \"w\", Var \"m\")), Var \"u\"),\n       Neg\n        (Neg\n          (And\n            (Neg\n              (Or (Or (Var \"p\", Or (Var \"z\", Var \"k\")),\n                And (Neg (Or (Var \"h\", Var \"i\")),\n                 And (Var \"j\", Or (Var \"k\", Neg (Var \"t\")))))),\n            Neg (Var \"f\"))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"f\"; \"g\"; \"h\"; \"i\"; \"j\"; \"k\"; \"m\"; \"p\"; \"q\"; \"r\"; \"t\"; \"u\"; \"w\"; \"x\";\n \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And (Neg (Neg (Neg (And (Var \"b\", Var \"j\")))),\n    Neg\n     (Neg\n       (Or\n         (Or (Or (Or (Var \"n\", Var \"m\"), Neg (Var \"a\")),\n           Neg\n            (And\n              (And (Or (And (Var \"v\", Var \"i\"), Var \"g\"),\n                Or (Var \"e\", Var \"c\")),\n              And (Var \"t\", Var \"p\")))),\n         Var \"z\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"b\"; \"c\"; \"e\"; \"g\"; \"i\"; \"j\"; \"m\"; \"n\"; \"p\"; \"t\"; \"v\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or\n    (Or (And (And (Neg (Var \"y\"), And (Var \"q\", Var \"w\")), Var \"w\"),\n      Or (And (Var \"j\", Var \"x\"), And (And (Var \"s\", Var \"p\"), Var \"m\"))),\n    Or (Var \"s\", And (And (Var \"i\", Var \"e\"), Var \"q\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"e\"; \"i\"; \"j\"; \"m\"; \"p\"; \"q\"; \"s\"; \"w\"; \"x\"; \"y\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or\n    (Or\n      (Or (And (Var \"l\", Or (Var \"a\", Var \"j\")),\n        Neg\n         (Or\n           (Or (And (Var \"v\", Var \"d\"),\n             And (And (And (Var \"e\", Var \"r\"), Var \"l\"),\n              Neg (Neg (And (Var \"e\", Var \"d\"))))),\n           Or (Or (Var \"w\", Var \"b\"), Var \"k\")))),\n      Var \"i\"),\n    And (Neg (Neg (Var \"e\")), And (Var \"p\", Var \"z\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"b\"; \"d\"; \"e\"; \"i\"; \"j\"; \"k\"; \"l\"; \"p\"; \"r\"; \"v\"; \"w\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (Neg\n      (Neg\n        (Neg\n          (Neg\n            (And (Neg (Neg (Var \"e\")),\n              Or\n               (And (Neg (Neg (Neg (Var \"e\"))),\n                 And (Var \"q\", Or (Neg (Var \"m\"), Var \"u\"))),\n               Or (And (Var \"m\", Neg (And (Var \"d\", Var \"z\"))), Var \"d\")))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"e\"; \"m\"; \"q\"; \"u\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (And\n      (Neg\n        (Or\n          (Neg\n            (And (Neg (Var \"p\"),\n              Neg\n               (And (And (Or (Var \"h\", Var \"t\"), Var \"h\"),\n                 Or (And (Var \"u\", Var \"u\"), Var \"d\"))))),\n          Or (Var \"w\", Var \"k\"))),\n      Or (Neg (Var \"l\"),\n       Or (And (Var \"z\", Var \"s\"),\n        Neg (Neg (Neg (Or (Var \"m\", Or (Var \"p\", Or (Var \"z\", Var \"q\")))))))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"h\"; \"k\"; \"l\"; \"m\"; \"p\"; \"q\"; \"s\"; \"t\"; \"u\"; \"w\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And (Neg (Neg (And (Or (Var \"k\", Var \"b\"), Or (Var \"q\", Var \"z\")))),\n    Neg\n     (Neg\n       (And (Or (And (Or (Var \"r\", Var \"h\"), Var \"v\"), Var \"p\"),\n         And\n          (Or (And (And (Var \"l\", Or (Var \"i\", Var \"n\")), Var \"y\"), Var \"j\"),\n          Var \"y\"))))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"h\"; \"i\"; \"j\"; \"k\"; \"l\"; \"n\"; \"p\"; \"q\"; \"r\"; \"v\"; \"y\"; \"z\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg (Neg (Or (And (And (Var \"e\", Neg (Var \"d\")), Var \"u\"), Var \"m\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"e\"; \"m\"; \"u\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And (Or (Neg (Var \"p\"), Neg (Neg (Neg (Var \"a\")))), Neg (Neg (Var \"x\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"p\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or (Or (And (Var \"q\", Var \"a\"), Var \"c\"),\n    Or\n     (Neg\n       (Neg\n         (Neg\n           (And (And (Var \"h\", Neg (Var \"t\")),\n             And (Var \"p\", Neg (And (Var \"c\", Var \"x\"))))))),\n     Neg (And (Or (Or (Var \"s\", Neg (Var \"q\")), Var \"s\"), Var \"x\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"c\"; \"h\"; \"p\"; \"q\"; \"s\"; \"t\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (And\n    (Neg\n      (Neg\n        (Or (Neg (Or (And (Var \"h\", Var \"p\"), Or (Var \"l\", Var \"r\"))),\n          And\n           (And (Neg (Neg (Var \"b\")),\n             Or (Var \"b\", Or (Or (And (Var \"l\", Var \"w\"), Var \"o\"), Var \"b\"))),\n           Var \"e\")))),\n    Or (Or (Var \"v\", Var \"c\"), Var \"b\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"b\"; \"c\"; \"e\"; \"h\"; \"l\"; \"o\"; \"p\"; \"r\"; \"v\"; \"w\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Or\n    (Neg\n      (Neg\n        (And (And (Neg (Or (Var \"d\", Var \"v\")), Var \"n\"),\n          Or (Or (Var \"u\", Var \"x\"), Var \"o\")))),\n    Var \"l\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"d\"; \"l\"; \"n\"; \"o\"; \"u\"; \"v\"; \"x\"]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "list_of_vars\n  (Neg\n    (Neg\n      (And\n        (And\n          (Neg\n            (And\n              (Or (Or (Or (Var \"l\", Var \"v\"), Neg (Neg (Var \"c\"))),\n                Or (And (Var \"d\", Var \"a\"), Or (Var \"n\", Var \"c\"))),\n              Var \"f\")),\n          Or (Var \"l\", Or (Var \"w\", Var \"n\"))),\n        And (And (Neg (Or (Var \"g\", Var \"q\")), Var \"n\"), Var \"u\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[\"a\"; \"c\"; \"d\"; \"f\"; \"g\"; \"l\"; \"n\"; \"q\"; \"u\"; \"v\"; \"w\"]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "eval_formula",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "eval_formula",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (And (And (And (Var \"a\", Var \"i\"), Var \"z\"),\n      Or (Or (Var \"d\", And (Neg (Var \"x\"), Var \"g\")),\n       Or (Neg (Or (Var \"x\", Var \"z\")),\n        And (And (Neg (And (Var \"w\", Var \"l\")), Or (Var \"u\", Var \"i\")),\n         Var \"x\"))))))\n  [(\"a\", true); (\"d\", true); (\"g\", true); (\"i\", true); (\"l\", false);\n   (\"u\", false); (\"w\", true); (\"x\", true); (\"z\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Or (Neg (Or (Var \"e\", Var \"h\")),\n    Or\n     (And (And (Or (Var \"y\", Var \"h\"), Neg (Var \"b\")),\n       Neg (Neg (Or (Var \"s\", Var \"v\")))),\n     Or (Neg (Var \"q\"), Var \"j\"))))\n  [(\"b\", false); (\"e\", true); (\"h\", true); (\"j\", true); (\"q\", true);\n   (\"s\", true); (\"v\", false); (\"y\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Or (Neg (Var \"q\"),\n    Neg\n     (And (Var \"y\",\n       Or (Neg (Neg (Var \"f\")),\n        Or (And (Var \"x\", Neg (Var \"d\")),\n         Or (And (And (Var \"v\", Var \"b\"), Or (Var \"c\", Var \"c\")),\n          And (Var \"c\", Var \"z\"))))))))\n  [(\"b\", false); (\"c\", false); (\"d\", false); (\"f\", true); (\"q\", true);\n   (\"v\", true); (\"x\", false); (\"y\", false); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And (And (Var \"q\", Or (Var \"y\", Var \"e\")),\n    And (Var \"l\", Or (Var \"z\", Var \"c\"))))\n  [(\"c\", true); (\"e\", true); (\"l\", false); (\"q\", true); (\"y\", false);\n   (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And\n    (Or (And (Var \"p\", Var \"o\"),\n      And (Var \"y\", And (And (Var \"e\", Var \"a\"), Neg (Var \"v\")))),\n    And\n     (Neg\n       (Or (And (Var \"z\", Var \"x\"),\n         And (And (Var \"t\", Neg (Var \"g\")),\n          Or (And (And (Var \"x\", Var \"s\"), Var \"r\"), Var \"v\")))),\n     Neg (Neg (Var \"o\")))))\n  [(\"a\", true); (\"e\", true); (\"g\", false); (\"o\", true); (\"p\", true);\n   (\"r\", true); (\"s\", false); (\"t\", false); (\"v\", false); (\"x\", false);\n   (\"y\", true); (\"z\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Or\n    (Or (Neg (Neg (Or (Var \"j\", Var \"a\"))),\n      Or (And (Var \"b\", Neg (And (Var \"d\", Var \"j\"))),\n       And (Var \"w\", Var \"b\"))),\n    And (And (Var \"n\", And (Var \"k\", Var \"h\")), Var \"a\")))\n  [(\"a\", true); (\"b\", true); (\"d\", false); (\"h\", false); (\"j\", false);\n   (\"k\", true); (\"n\", true); (\"w\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And (Or (And (Var \"e\", Var \"p\"), Var \"n\"),\n    Or (Or (Var \"e\", Neg (Var \"b\")),\n     And (Or (Neg (Var \"y\"), Or (Var \"a\", Var \"k\")), And (Var \"a\", Var \"g\")))))\n  [(\"a\", true); (\"b\", false); (\"e\", true); (\"g\", false); (\"k\", false);\n   (\"n\", true); (\"p\", false); (\"y\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Or\n    (Neg\n      (Neg\n        (And (Or (Var \"d\", Var \"e\"),\n          Or (Neg (Or (Or (Var \"x\", Var \"d\"), Or (Var \"s\", Var \"l\"))),\n           Or (Neg (Or (Var \"s\", Or (Var \"c\", Var \"m\"))), Neg (Var \"s\")))))),\n    Var \"c\"))\n  [(\"c\", false); (\"d\", false); (\"e\", false); (\"l\", false); (\"m\", true);\n   (\"s\", true); (\"x\", false)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (Neg\n    (Or\n      (Neg\n        (Or\n          (And (And (Var \"y\", And (Var \"j\", Neg (Var \"f\"))),\n            Or (And (Var \"o\", Var \"g\"),\n             Or (Neg (And (Var \"c\", Or (Var \"d\", Var \"z\"))),\n              Neg (Or (And (Var \"q\", Var \"i\"), Or (Var \"f\", Var \"c\")))))),\n          Neg\n           (Or (Or (Var \"j\", And (Var \"e\", Neg (Var \"k\"))),\n             And (Var \"b\", Var \"h\"))))),\n      Neg (Var \"b\"))))\n  [(\"b\", true); (\"c\", false); (\"d\", true); (\"e\", false); (\"f\", false);\n   (\"g\", false); (\"h\", false); (\"i\", false); (\"j\", true); (\"k\", true);\n   (\"o\", true); (\"q\", true); (\"y\", false); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "eval_formula\n  (And (Neg (Var \"k\"),\n    And (And (Var \"z\", Var \"u\"),\n     And (Var \"k\",\n      And (And (And (And (Var \"o\", Var \"r\"), Neg (Neg (Var \"b\"))), Var \"h\"),\n       Neg\n        (Neg\n          (Or (Var \"l\",\n            Or (Or (Var \"t\", Neg (Or (Var \"c\", Var \"v\"))), Var \"q\")))))))))\n  [(\"b\", false); (\"c\", false); (\"h\", false); (\"k\", false); (\"l\", true);\n   (\"o\", true); (\"q\", false); (\"r\", true); (\"t\", false); (\"u\", false);\n   (\"v\", true); (\"z\", true)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1570624409.009169
    },
    "5.2_formules_satisfiables": {
      "grade": 42,
      "solution": "let add_to_all x ll = List.map ( fun l -> x::l) ll;;\n  \nlet rec assignments_vars l =  match l with\n    [] -> [[]]\n  |a::q ->\n      let t = assignments_vars q in \n      (add_to_all (a,false) t)@(add_to_all (a, true)t);;\n\n(*\n  let rec concat l1 l2 = \n   if List.length l1 =0 then l2\n   else if List.length l2=0 then l1\n   else if List.hd l1 < List.hd l2 then List.hd l1 :: concat (List.tl l1) l2\n   else if List.hd l1 = List.hd l2 then concat (List.tl l1) l2\n   else List.hd l2 :: concat l1 (List.tl l2);;\n\n\n let  rec list_of_vars f = match f with\n     Var x -> [x] \n   |Neg f1 -> list_of_vars f1\n   |Or(f1,f2) -> concat (list_of_vars f1) (list_of_vars f2)\n   |And(f1,f2) ->concat (list_of_vars f1) (list_of_vars f2);;\n  \n let assignments f = assignments_vars (list_of_vars f);;\n \"\";;\nlet rec eval_formula f l = match f with\n      Var s -> (List.assoc s l)\n    |Neg f ->not( eval_formula f l)\n    |Or(f1,f2) -> (eval_formula f1 l) || (eval_formula f2 l)\n    |And (f1,f2) -> (eval_formula f1 l) && (eval_formula f2 l);;\n                           \n \"\";;\n let satisfiable f =\n   let le = assignments f in\n   List.exists (eval_formula f ) le;;\n \"Remplacer cette chaîne par votre code\" ;;\n\n let tautology f =\n  (* let le = assignments f in\n    List.for_all (eval_formula f) le;;\n   *)    \"Remplacer cette chaîne par votre code\" ;;*)\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "add_to_all",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "add_to_all",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all -1 [[-5; 2; 2]; [0; -4; -1; -5; -2; -1; -1]; [-3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-1; -5; 2; 2]; [-1; 0; -4; -1; -5; -2; -1; -1]; [-1; -3]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  -3\n  [[4; -5; 1; 0; -3; -3; -2; 0; 0]; [-4; 1; -5; -1; -4; -5; 3; 1; 1];\n   [2; -4; -2; 4; 1; -1; -1; -3; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-3; 4; -5; 1; 0; -3; -3; -2; 0; 0]; [-3; -4; 1; -5; -1; -4; -5; 3; 1; 1];\n [-3; 2; -4; -2; 4; 1; -1; -1; -3; 1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  3\n  [[1; -4; 2; -1; -1; 0; -4; -1; -4]; [1; 3; -3; -2; -4; 2; 0; 0];\n   [-1; -1; -4]; [1; 4; 0; 2; 2; -1; -4; 1; -3; 2]; [-3; 4; -5]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[3; 1; -4; 2; -1; -1; 0; -4; -1; -4]; [3; 1; 3; -3; -2; -4; 2; 0; 0];\n [3; -1; -1; -4]; [3; 1; 4; 0; 2; 2; -1; -4; 1; -3; 2]; [3; -3; 4; -5]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all -5 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all -3 [[-5; 1; -3; 3; -2; -5; 4; -3; -5]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-3; -5; 1; -3; 3; -2; -5; 4; -3; -5]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  1\n  [[4; -5; -2; -5; 0; 4; 0]; [-4; 2; -2; 0; -5; 3]; [-4; 3; 1; 4; 0; 3; 1];\n   [-1]; [-2; -2; -3; 3; 3; -5; 1; 1; -3; 3]; [-2]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[1; 4; -5; -2; -5; 0; 4; 0]; [1; -4; 2; -2; 0; -5; 3];\n [1; -4; 3; 1; 4; 0; 3; 1]; [1; -1]; [1; -2; -2; -3; 3; 3; -5; 1; 1; -3; 3];\n [1; -2]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  0\n  [[2; -3; 4; -1; -4]; [-3; 3; 0; -2; -5; 1; 1]; [-1; 2; 0; -5]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[0; 2; -3; 4; -1; -4]; [0; -3; 3; 0; -2; -5; 1; 1]; [0; -1; 2; 0; -5]; [0]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 2 [[-4; -5; 3; 4; 1; -4; -1; 1]; [2; 3; -2; -2; -2; 0]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[2; -4; -5; 3; 4; 1; -4; -1; 1]; [2; 2; 3; -2; -2; -2; 0]; [2]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all -1 [[4; -2; -3; 3]; [4; 1; -2; -2; 4; 0; 3; 2; -1]; [1; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-1; 4; -2; -3; 3]; [-1; 4; 1; -2; -2; 4; 0; 3; 2; -1]; [-1; 1; 1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  2\n  [[4; -5; 0; 1; 2; -4; -2; -4]; [-4; -1];\n   [-2; 4; 1; 2; -3; 3; -3; -2; -1; -2]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[2; 4; -5; 0; 1; 2; -4; -2; -4]; [2; -4; -1];\n [2; -2; 4; 1; 2; -3; 3; -3; -2; -1; -2]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all -4 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  -2\n  [[-4; 4; 3; 4; -3; 0; -3; 2; 4]; [2; 4; -3; 2; -4; 4; -2; -4; -1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-2; -4; 4; 3; 4; -3; 0; -3; 2; 4]; [-2; 2; 4; -3; 2; -4; 4; -2; -4; -1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 0 [[-5; -3]; [4; -1; -2; 2; -4; 2; 3; 1]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[0; -5; -3]; [0; 4; -1; -2; 2; -4; 2; 3; 1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  0\n  [[-2; -5; 4; -4]; [2; -4]; [-3; 1]; []; [1; 0; -5];\n   [4; -1; 2; -3; 2; 1; 3; -2; 2]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[0; -2; -5; 4; -4]; [0; 2; -4]; [0; -3; 1]; [0]; [0; 1; 0; -5];\n [0; 4; -1; 2; -3; 2; 1; 3; -2; 2]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  2\n  [[-5; -5; 3; -1; 1; -4]; [-3; -4; -3; 0; -2; -3];\n   [0; -1; -3; 4; -2; -3; 2; -3; 4; 3]; []; [-4];\n   [-2; -2; 2; 2; 0; 2; -4; -3]; [0; 2; -3; 0; -5; -2; -5; -2; -5; 0]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[2; -5; -5; 3; -1; 1; -4]; [2; -3; -4; -3; 0; -2; -3];\n [2; 0; -1; -3; 4; -2; -3; 2; -3; 4; 3]; [2]; [2; -4];\n [2; -2; -2; 2; 2; 0; 2; -4; -3]; [2; 0; 2; -3; 0; -5; -2; -5; -2; -5; 0]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  -3\n  [[-2; 2; 1; -4; -2; 1; -2; -3; 1]; [-4; 4]; [-2; 4; 1; -5]; [3; -4; 1];\n   [-3; -2; -4; 4; -1; -2]; [3]; [0; 4]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-3; -2; 2; 1; -4; -2; 1; -2; -3; 1]; [-3; -4; 4]; [-3; -2; 4; 1; -5];\n [-3; 3; -4; 1]; [-3; -3; -2; -4; 4; -1; -2]; [-3; 3]; [-3; 0; 4]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  1\n  [[-3; -1]; [-3; 2; 3; 4; -2; -4; 1; -1]; [4; 2]; [0; 2; 4; -2; -5; -4; 2];\n   [0; 1; -2; 1; -3; 1; -1; -4; 0; -4]; []; [-5; 0; -5; 3; -5; -5]; [2];\n   [2; 2; 4; -5; -4; -4; -1]; []]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[1; -3; -1]; [1; -3; 2; 3; 4; -2; -4; 1; -1]; [1; 4; 2];\n [1; 0; 2; 4; -2; -5; -4; 2]; [1; 0; 1; -2; 1; -3; 1; -1; -4; 0; -4]; \n [1]; [1; -5; 0; -5; 3; -5; -5]; [1; 2]; [1; 2; 2; 4; -5; -4; -4; -1]; \n [1]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  -2\n  [[]; [0; 3; -4; -4; 0; 3; 2; 0; -3]; []; [4; 2; -2; -5; -1; -3; -5; 1];\n   [-5; 1; -3; 0]; [1]; [4; 3; 2; -1; -1; -2; -5; -3; -2; -3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-2]; [-2; 0; 3; -4; -4; 0; 3; 2; 0; -3]; [-2];\n [-2; 4; 2; -2; -5; -1; -3; -5; 1]; [-2; -5; 1; -3; 0]; [-2; 1];\n [-2; 4; 3; 2; -1; -1; -2; -5; -3; -2; -3]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all\n  -4\n  [[1; -5; -3]; [-4; -4; -1; 0]; [-2; -2; 3; 1; 3; 3]; []; [2; 3; 0];\n   [-3; 4; 0; 3; 0]; [0; -3; -2]; []; [-3; -3]; [2; -1; 2; -1; -3]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[-4; 1; -5; -3]; [-4; -4; -4; -1; 0]; [-4; -2; -2; 3; 1; 3; 3]; [-4];\n [-4; 2; 3; 0]; [-4; -3; 4; 0; 3; 0]; [-4; 0; -3; -2]; [-4]; [-4; -3; -3];\n [-4; 2; -1; 2; -1; -3]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "add_to_all 2 [[4; 4; 1]; []; [-3; 1; 4; -4; 0]]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[2; 4; 4; 1]; [2]; [2; -3; 1; 4; -4; 0]]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "assignments_vars",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "assignments_vars",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"j\"; \"i\"; \"h\"; \"g\"; \"f\"; \"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (...); ...];\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"j\"; \"i\"; \"h\"; \"g\"; \"f\"; \"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false); (\"f\", false);\n  (\"e\", false); (...); ...];\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"k\"; \"j\"; \"i\"; \"h\"; \"g\"; \"f\"; \"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false);\n  (\"a\", false)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false);\n  (\"a\", true)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true);\n  (\"a\", false)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true);\n  (\"a\", true)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false);\n  (\"a\", false)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false);\n  (\"a\", true)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true);\n  (\"a\", false)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true);\n  (\"a\", true)];\n [(\"k\", false); (\"j\", false); (\"i\", false); (\"h\", false); (\"g\", false);\n  (\"f\", false); (\"e\", false); (\"d\", true); (\"c\", ...); ...];\n ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"e\", true); (\"d\", false); (\"c\", false); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"c\", true); (\"b\", true); (\"a\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"f\"; \"e\"; \"d\"; \"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", false);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", false); (\"b\", true);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", false);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", false); (\"c\", true); (\"b\", true);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", false);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", false); (\"b\", true);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", true); (\"b\", false);\n  (\"a\", true)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", true); (\"b\", true);\n  (\"a\", false)];\n [(\"f\", false); (\"e\", false); (\"d\", true); (\"c\", true); (...); ...]; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"b\", false); (\"a\", false)]; [(\"b\", false); (\"a\", true)];\n [(\"b\", true); (\"a\", false)]; [(\"b\", true); (\"a\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "assignments_vars [\"c\"; \"b\"; \"a\"]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[[(\"c\", false); (\"b\", false); (\"a\", false)];\n [(\"c\", false); (\"b\", false); (\"a\", true)];\n [(\"c\", false); (\"b\", true); (\"a\", false)];\n [(\"c\", false); (\"b\", true); (\"a\", true)];\n [(\"c\", true); (\"b\", false); (\"a\", false)];\n [(\"c\", true); (\"b\", false); (\"a\", true)];\n [(\"c\", true); (\"b\", true); (\"a\", false)];\n [(\"c\", true); (\"b\", true); (\"a\", true)]]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "assignments",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "assignments",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "satisfiable",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "satisfiable",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "tautology",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "tautology",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        }
      ],
      "mtime": 1571931457.277664
    },
    "5.4_CNF": {
      "grade": 68,
      "solution": "let rec desc_neg f = match f with\n  | Neg(Neg g) -> desc_neg g\n  | Neg(Or(g,h)) -> And(desc_neg(Neg g), desc_neg(Neg f))\n  | Neg(And(g,h)) -> Or(desc_neg(Neg g), desc_neg(Neg f))\n  | Or(g,h) -> Or(desc_neg g, desc_neg h)\n  | And(g,h) -> And(desc_neg g, desc_neg h)\n  | f -> f;; \n\nlet rec desc_or f = match f with\n    And(g,h) -> And( desc_or g, desc_or h)\n  |Or(g,h)-> let g1= desc_or g and h1 = desc_or h in \n      (\n        match g1,h1 with\n          _,And(g,h) -> And( desc_or (Or(g1,g)),desc_or (Or(g1,h)))\n        | And(f,g),_ -> And( desc_or (Or(f,h1)),desc_or (Or(g,h1)))\n        |_ -> Or(g1,h1)\n      )\n  |f->f;;\n\nlet cnf f = desc_or( desc_neg f);;\n",
      "report": [
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "desc_neg",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "desc_neg",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (Neg (Var \"o\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"o\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (Neg (Neg (And (Var \"i\", Var \"i\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Or (Neg (Var \"i\"), And (Var \"i\", Var \"i\")))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (Neg (Or (Or (Var \"r\", Var \"b\"), Neg (Var \"c\"))),\n    Or (Neg (And (Var \"d\", Var \"q\")),\n     And (Or (Var \"s\", Var \"x\"), Or (Var \"j\", Var \"w\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Or\n  (And (And (Neg (Var \"r\"), Or (Var \"r\", Var \"b\")),\n    Or (Or (Var \"r\", Var \"b\"), Neg (Var \"c\"))),\n  Or (Or (Neg (Var \"d\"), And (Var \"d\", Var \"q\")),\n   And (Or (Var \"s\", Var \"x\"), Or (Var \"j\", Var \"w\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (Neg (Neg (And (Var \"o\", Var \"a\"))), Neg (Neg (Neg (Var \"x\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Var \"o\", Var \"a\"), Neg (Var \"x\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And\n    (And (And (Neg (Var \"o\"), Or (Var \"u\", Var \"r\")),\n      And (And (Var \"k\", Var \"q\"), Or (Var \"b\", Var \"n\"))),\n    Neg (And (Or (Var \"l\", Var \"d\"), Neg (Var \"k\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And\n  (And (And (Neg (Var \"o\"), Or (Var \"u\", Var \"r\")),\n    And (And (Var \"k\", Var \"q\"), Or (Var \"b\", Var \"n\"))),\n  Or (And (Neg (Var \"l\"), Or (Var \"l\", Var \"d\")),\n   And (Or (Var \"l\", Var \"d\"), Neg (Var \"k\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (And (And (Var \"h\", Var \"q\"), Neg (Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Var \"h\", Var \"q\"), Neg (Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Neg\n    (And (Or (Neg (Var \"c\"), Neg (Var \"x\")),\n      And (Neg (Var \"x\"), Or (Var \"u\", Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Or (And (Var \"c\", Or (Neg (Var \"c\"), Neg (Var \"x\"))),\n  And (Or (Neg (Var \"c\"), Neg (Var \"x\")),\n   And (Neg (Var \"x\"), Or (Var \"u\", Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Or (Neg (Var \"r\"), Neg (Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Neg (Var \"r\"), Neg (Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And\n    (Or (And (And (Var \"x\", Var \"e\"), Neg (Var \"s\")),\n      Or (Or (Var \"h\", Var \"u\"), Neg (Var \"n\"))),\n    And (Neg (Or (Var \"h\", Var \"d\")),\n     Or (Or (Var \"i\", Var \"j\"), Or (Var \"e\", Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And\n  (Or (And (And (Var \"x\", Var \"e\"), Neg (Var \"s\")),\n    Or (Or (Var \"h\", Var \"u\"), Neg (Var \"n\"))),\n  And (And (Neg (Var \"h\"), Or (Var \"h\", Var \"d\")),\n   Or (Or (Var \"i\", Var \"j\"), Or (Var \"e\", Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (And (Var \"t\", Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Or (Neg (Var \"t\"), And (Var \"t\", Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (Neg (And (Or (Var \"g\", Var \"j\"), And (Var \"a\", Var \"u\"))),\n    And (And (Neg (Var \"l\"), Neg (Var \"r\")),\n     Or (Or (Var \"u\", Var \"g\"), Or (Var \"p\", Var \"z\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(Or\n  (Or (And (Neg (Var \"g\"), Or (Var \"g\", Var \"j\")),\n    And (Or (Var \"g\", Var \"j\"), And (Var \"a\", Var \"u\"))),\n  And (And (Neg (Var \"l\"), Neg (Var \"r\")),\n   Or (Or (Var \"u\", Var \"g\"), Or (Var \"p\", Var \"z\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (And (Neg (And (Or (Var \"r\", Var \"o\"), Neg (Var \"s\"))),\n    Neg (Or (Or (Var \"x\", Var \"m\"), Or (Var \"n\", Var \"v\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And\n  (Or (And (Neg (Var \"r\"), Or (Var \"r\", Var \"o\")),\n    And (Or (Var \"r\", Var \"o\"), Neg (Var \"s\"))),\n  And (And (Neg (Var \"x\"), Or (Var \"x\", Var \"m\")),\n   Or (Or (Var \"x\", Var \"m\"), Or (Var \"n\", Var \"v\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Neg (Neg (Neg (Var \"y\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Neg (Var \"y\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg (Or (Neg (Var \"g\"), Or (Var \"h\", Var \"l\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Neg (Var \"g\"), Or (Var \"h\", Var \"l\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_neg\n  (Or (And (And (Var \"s\", Var \"b\"), And (Var \"o\", Var \"k\")),\n    Or (And (Var \"r\", Var \"n\"), And (Var \"p\", Var \"f\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (And (And (Var \"s\", Var \"b\"), And (Var \"o\", Var \"k\")),\n  Or (And (Var \"r\", Var \"n\"), And (Var \"p\", Var \"f\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "desc_or",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "desc_or",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (Or (Var \"y\", Var \"b\"), Neg (Var \"a\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Or (Var \"y\", Var \"b\"), Neg (Var \"a\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (And (Neg (Var \"e\"), Or (Var \"g\", Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Neg (Var \"e\"), Or (Var \"g\", Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And\n    (And (And (Neg (Var \"x\"), Neg (Var \"p\")),\n      And (And (Var \"m\", Var \"q\"), Neg (Var \"b\"))),\n    Or (And (Neg (Var \"o\"), Neg (Var \"f\")),\n     Or (Neg (Var \"k\"), Neg (Var \"c\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (And (Neg (Var \"x\"), Neg (Var \"p\")),\n    And (And (Var \"m\", Var \"q\"), Neg (Var \"b\"))),\n  And (Or (Neg (Var \"o\"), Or (Neg (Var \"k\"), Neg (Var \"c\"))),\n   Or (Neg (Var \"f\"), Or (Neg (Var \"k\"), Neg (Var \"c\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (Or (And (Var \"b\", Var \"b\"), Neg (Var \"b\")),\n    Or (Neg (Var \"n\"), Or (Var \"j\", Var \"z\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (Or (Or (Var \"b\", Neg (Var \"b\")),\n    Or (Neg (Var \"n\"), Or (Var \"j\", Var \"z\"))),\n  Or (Or (Var \"b\", Neg (Var \"b\")), Or (Neg (Var \"n\"), Or (Var \"j\", Var \"z\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (And (Neg (Var \"i\"), Neg (Var \"a\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Neg (Var \"i\"), Neg (Var \"a\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (Or (Var \"f\", Var \"y\"), Or (Var \"z\", Var \"v\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Or (Var \"f\", Var \"y\"), Or (Var \"z\", Var \"v\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or\n    (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")),\n      And (Neg (Var \"u\"), Neg (Var \"o\"))),\n    And (Or (Neg (Var \"b\"), Neg (Var \"q\")),\n     And (Neg (Var \"f\"), Neg (Var \"e\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"u\")),\n      Or (Neg (Var \"b\"), Neg (Var \"q\"))),\n    Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"o\")),\n     Or (Neg (Var \"b\"), Neg (Var \"q\")))),\n  And\n   (And\n     (Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"u\")),\n       Neg (Var \"f\")),\n     Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"o\")),\n      Neg (Var \"f\"))),\n   And\n    (Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"u\")),\n      Neg (Var \"e\")),\n    Or (Or (Or (Neg (Var \"p\"), Neg (Var \"o\")), Neg (Var \"o\")), Neg (Var \"e\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (Or (And (Var \"r\", Var \"i\"), Neg (Var \"c\")),\n    Or (And (Var \"c\", Var \"p\"), Or (Var \"z\", Var \"p\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (Or (Or (Var \"r\", Neg (Var \"c\")), Or (Var \"c\", Or (Var \"z\", Var \"p\"))),\n    Or (Or (Var \"i\", Neg (Var \"c\")), Or (Var \"c\", Or (Var \"z\", Var \"p\")))),\n  And (Or (Or (Var \"r\", Neg (Var \"c\")), Or (Var \"p\", Or (Var \"z\", Var \"p\"))),\n   Or (Or (Var \"i\", Neg (Var \"c\")), Or (Var \"p\", Or (Var \"z\", Var \"p\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (Or (And (Neg (Var \"z\"), Neg (Var \"j\")), Or (Neg (Var \"q\"), Neg (Var \"y\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Neg (Var \"z\"), Or (Neg (Var \"q\"), Neg (Var \"y\"))),\n  Or (Neg (Var \"j\"), Or (Neg (Var \"q\"), Neg (Var \"y\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (Var \"j\", Var \"v\"))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Or (Var \"j\", Var \"v\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And\n    (And (And (Or (Var \"h\", Var \"v\"), Or (Var \"t\", Var \"b\")),\n      And (Neg (Var \"b\"), Neg (Var \"y\"))),\n    And (Var \"n\", Var \"e\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And (And (Or (Var \"h\", Var \"v\"), Or (Var \"t\", Var \"b\")),\n    And (Neg (Var \"b\"), Neg (Var \"y\"))),\n  And (Var \"n\", Var \"e\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (And (Or (Var \"c\", Var \"z\"), Or (Var \"a\", Var \"g\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Var \"c\", Var \"z\"), Or (Var \"a\", Var \"g\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or\n  (And (And (Neg (Var \"v\"), Neg (Var \"h\")),\n    Or (Neg (Var \"q\"), Neg (Var \"u\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Neg (Var \"v\"), Neg (Var \"h\")), Or (Neg (Var \"q\"), Neg (Var \"u\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Or (And (Var \"x\", Var \"d\"), Neg (Var \"d\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Var \"x\", Neg (Var \"d\")), Or (Var \"d\", Neg (Var \"d\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "desc_or (Var \"n\")",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"n\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Function:"
            },
            {
              "text": "cnf",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "cnf",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Or (Or (Var \"p\", Var \"q\"), Or (Var \"k\", Var \"x\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And (And (Neg (Var \"p\"), Or (Var \"p\", Var \"q\")),\n  Or (Or (Var \"p\", Var \"q\"), Or (Var \"k\", Var \"x\"))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (And\n    (Or (And (Or (Var \"j\", Var \"l\"), And (Var \"q\", Var \"b\")),\n      And (Or (Var \"q\", Var \"b\"), Neg (Var \"z\"))),\n    And (Or (Or (Var \"x\", Var \"b\"), Neg (Var \"n\")),\n     And (Neg (Var \"x\"), Neg (Var \"p\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And (Or (Or (Var \"j\", Var \"l\"), Or (Var \"q\", Var \"b\")),\n      And (Or (Var \"q\", Or (Var \"q\", Var \"b\")),\n       Or (Var \"b\", Or (Var \"q\", Var \"b\")))),\n    And (Or (Or (Var \"j\", Var \"l\"), Neg (Var \"z\")),\n     And (Or (Var \"q\", Neg (Var \"z\")), Or (Var \"b\", Neg (Var \"z\"))))),\n  And (Or (Or (Var \"x\", Var \"b\"), Neg (Var \"n\")),\n   And (Neg (Var \"x\"), Neg (Var \"p\")))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Or (Var \"o\", Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And (Neg (Var \"o\"), Or (Var \"o\", Var \"h\")))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Neg (Neg (Var \"m\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Neg (Var \"m\"))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (And\n    (And (Neg (Neg (Var \"f\")), And (Neg (Var \"a\"), And (Var \"e\", Var \"a\"))),\n    Or (Or (And (Var \"x\", Var \"y\"), Or (Var \"g\", Var \"o\")),\n     Or (Neg (Var \"g\"), Neg (Var \"c\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Var \"f\", And (Neg (Var \"a\"), And (Var \"e\", Var \"a\"))),\n  And\n   (Or (Or (Var \"x\", Or (Var \"g\", Var \"o\")),\n     Or (Neg (Var \"g\"), Neg (Var \"c\"))),\n   Or (Or (Var \"y\", Or (Var \"g\", Var \"o\")),\n    Or (Neg (Var \"g\"), Neg (Var \"c\"))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Neg\n    (Or (And (Or (Var \"z\", Var \"b\"), Or (Var \"j\", Var \"m\")),\n      Or (Or (Var \"g\", Var \"j\"), Neg (Var \"o\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And\n  (And\n    (And (Or (Neg (Var \"z\"), Or (Var \"z\", Var \"b\")),\n      Or (Or (Var \"z\", Var \"b\"), Or (Var \"z\", Var \"b\"))),\n    And (Or (Neg (Var \"z\"), Or (Var \"j\", Var \"m\")),\n     Or (Or (Var \"z\", Var \"b\"), Or (Var \"j\", Var \"m\")))),\n  And (Or (Or (Var \"z\", Var \"b\"), Or (Or (Var \"g\", Var \"j\"), Neg (Var \"o\"))),\n   Or (Or (Var \"j\", Var \"m\"), Or (Or (Var \"g\", Var \"j\"), Neg (Var \"o\"))))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or\n    (And (Or (And (Var \"b\", Var \"i\"), Neg (Var \"v\")),\n      Or (And (Var \"f\", Var \"k\"), And (Var \"z\", Var \"w\"))),\n    Or (And (Or (Var \"b\", Var \"y\"), Neg (Var \"t\")),\n     And (And (Var \"a\", Var \"u\"), Neg (Var \"r\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And\n      (And\n        (And\n          (Or (Or (Var \"b\", Neg (Var \"v\")),\n            Or (Or (Var \"b\", Var \"y\"), Var \"a\")),\n          Or (Or (Var \"i\", Neg (Var \"v\")),\n           Or (Or (Var \"b\", Var \"y\"), Var \"a\"))),\n        And\n         (And\n           (Or (Or (Var \"f\", Var \"z\"), Or (Or (Var \"b\", Var \"y\"), Var \"a\")),\n           Or (Or (Var \"k\", Var \"z\"), Or (Or (Var \"b\", Var \"y\"), Var \"a\"))),\n         And\n          (Or (Or (Var \"f\", Var \"w\"), Or (Or (Var \"b\", Var \"y\"), Var \"a\")),\n          Or (Or (Var \"k\", Var \"w\"), Or (Or (Var \"b\", Var \"y\"), Var \"a\"))))),\n      And\n       (And (Or (Or (Var \"b\", Neg (Var \"v\")), Or (Neg (Var \"t\"), Var \"a\")),\n         Or (Or (Var \"i\", Neg (Var \"v\")), Or (Neg (Var \"t\"), Var \"a\"))),\n       And\n        (And (Or (Or (Var \"f\", Var \"z\"), Or (Neg (Var \"t\"), Var \"a\")),\n          Or (Or (Var \"k\", Var \"z\"), Or (Neg (Var \"t\"), Var \"a\"))),\n        And (Or (Or (Var \"f\", Var \"w\"), Or (Neg (Var \"t\"), Var \"a\")),\n         Or (Or (Var \"k\", Var \"w\"), Or (Neg (Var \"t\"), Var \"a\")))))),\n    And\n     (And\n       (And\n         (Or (Or (Var \"b\", Neg (Var \"v\")),\n           Or (Or (Var \"b\", Var \"y\"), Var \"u\")),\n         Or (Or (Var \"i\", Neg (Var \"v\")),\n          Or (Or (Var \"b\", Var \"y\"), Var \"u\"))),\n       And\n        (And\n          (Or (Or (Var \"f\", Var \"z\"), Or (Or (Var \"b\", Var \"y\"), Var \"u\")),\n          Or (Or (Var \"k\", Var \"z\"), Or (Or (Var \"b\", Var \"y\"), Var \"u\"))),\n        And (Or (Or (Var \"f\", Var \"w\"), Or (Or (Var \"b\", Var \"y\"), Var \"u\")),\n         Or (Or (Var \"k\", Var \"w\"), Or (Or (Var \"b\", Var \"y\"), Var \"u\"))))),\n     And\n      (And (Or (Or (Var \"b\", Neg (Var \"v\")), Or (Neg (Var \"t\"), Var \"u\")),\n        Or (Or (Var \"i\", Neg (Var \"v\")), Or (Neg (Var \"t\"), Var \"u\"))),\n      And (And (Or (Or (Var \"f\", Var ...), ...), ...), ...)))),\n    ...))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (And (Or (Var \"u\", Var \"w\"), And (Var \"g\", Var \"e\")),\n    Neg (And (Var \"a\", Var \"c\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And\n  (And (Or (Or (Var \"u\", Var \"w\"), Or (Neg (Var \"a\"), Var \"a\")),\n    And (Or (Var \"g\", Or (Neg (Var \"a\"), Var \"a\")),\n     Or (Var \"e\", Or (Neg (Var \"a\"), Var \"a\")))),\n  And (Or (Or (Var \"u\", Var \"w\"), Or (Neg (Var \"a\"), Var \"c\")),\n   And (Or (Var \"g\", Or (Neg (Var \"a\"), Var \"c\")),\n    Or (Var \"e\", Or (Neg (Var \"a\"), Var \"c\"))))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Or (Neg (Var \"g\"), And (Var \"o\", Var \"h\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And (Var \"g\",\n  And (Or (Neg (Var \"g\"), Var \"o\"), Or (Neg (Var \"g\"), Var \"h\"))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Neg (Neg (Var \"c\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Var \"c\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf (Or (Or (Var \"i\", Var \"u\"), And (Var \"c\", Var \"y\")))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (Or (Or (Var \"i\", Var \"u\"), Var \"c\"),\n  Or (Or (Var \"i\", Var \"u\"), Var \"y\")))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (Neg (Neg (Or (Var \"a\", Var \"m\"))),\n    Or (And (Or (Var \"m\", Var \"k\"), And (Var \"u\", Var \"n\")),\n     And (Or (Var \"v\", Var \"h\"), Neg (Var \"l\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (Or (Or (Var \"a\", Var \"m\"),\n      Or (Or (Var \"m\", Var \"k\"), Or (Var \"v\", Var \"h\"))),\n    And (Or (Or (Var \"a\", Var \"m\"), Or (Var \"u\", Or (Var \"v\", Var \"h\"))),\n     Or (Or (Var \"a\", Var \"m\"), Or (Var \"n\", Or (Var \"v\", Var \"h\"))))),\n  And (Or (Or (Var \"a\", Var \"m\"), Or (Or (Var \"m\", Var \"k\"), Neg (Var \"l\"))),\n   And (Or (Or (Var \"a\", Var \"m\"), Or (Var \"u\", Neg (Var \"l\"))),\n    Or (Or (Var \"a\", Var \"m\"), Or (Var \"n\", Neg (Var \"l\")))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (Neg (Neg (And (Var \"c\", Var \"b\"))),\n    Or (And (And (Var \"i\", Var \"l\"), Neg (Var \"l\")),\n     And (Or (Var \"c\", Var \"u\"), Neg (Var \"n\")))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And\n  (And\n    (And\n      (And (Or (Var \"c\", Or (Var \"i\", Or (Var \"c\", Var \"u\"))),\n        Or (Var \"b\", Or (Var \"i\", Or (Var \"c\", Var \"u\")))),\n      And (Or (Var \"c\", Or (Var \"l\", Or (Var \"c\", Var \"u\"))),\n       Or (Var \"b\", Or (Var \"l\", Or (Var \"c\", Var \"u\"))))),\n    And (Or (Var \"c\", Or (Neg (Var \"l\"), Or (Var \"c\", Var \"u\"))),\n     Or (Var \"b\", Or (Neg (Var \"l\"), Or (Var \"c\", Var \"u\"))))),\n  And\n   (And\n     (And (Or (Var \"c\", Or (Var \"i\", Neg (Var \"n\"))),\n       Or (Var \"b\", Or (Var \"i\", Neg (Var \"n\")))),\n     And (Or (Var \"c\", Or (Var \"l\", Neg (Var \"n\"))),\n      Or (Var \"b\", Or (Var \"l\", Neg (Var \"n\"))))),\n   And (Or (Var \"c\", Or (Neg (Var \"l\"), Neg (Var \"n\"))),\n    Or (Var \"b\", Or (Neg (Var \"l\"), Neg (Var \"n\")))))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (And (And (Or (Var \"y\", Var \"s\"), Neg (Var \"e\")),\n    Or (Or (Var \"s\", Var \"j\"), Neg (Var \"g\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(And (And (Or (Var \"y\", Var \"s\"), Neg (Var \"e\")),\n  Or (Or (Var \"s\", Var \"j\"), Neg (Var \"g\"))))",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "cnf\n  (Or (Neg (Or (Var \"a\", Var \"y\")),\n    Or (Neg (Var \"l\"), Or (Var \"q\", Var \"g\"))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Wrong value"
                },
                {
                  "text": "(And (Or (Neg (Var \"a\"), Or (Neg (Var \"l\"), Or (Var \"q\", Var \"g\"))),\n  Or (Or (Var \"a\", Var \"y\"), Or (Neg (Var \"l\"), Or (Var \"q\", Var \"g\")))))",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        }
      ],
      "mtime": 1571932556.56912
    },
    "6.1_rec_terminale": {
      "grade": 100,
      "solution": "let listn1 n =\n  let rec aux e l = \n    if e < 0 then l\n    else  aux (e-1) (e::l)\n  in List.rev (aux n []);;\n\n\nlet length1 l =\n  let rec aux e acc = match e with\n      []->acc\n    |t::q -> aux q (acc+1)\n  in aux l 0;;\n    ",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "listn1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "listn1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 1000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1000; 999; 998; 997; 996; 995; 994; 993; 992; 991; 990; 989; 988; 987; 986;\n 985; 984; 983; 982; 981; 980; 979; 978; 977; 976; 975; 974; 973; 972; 971;\n 970; 969; 968; 967; 966; 965; 964; 963; 962; 961; 960; 959; 958; 957; 956;\n 955; 954; 953; 952; 951; 950; 949; 948; 947; 946; 945; 944; 943; 942; 941;\n 940; 939; 938; 937; 936; 935; 934; 933; 932; 931; 930; 929; 928; 927; 926;\n 925; 924; 923; 922; 921; 920; 919; 918; 917; 916; 915; 914; 913; 912; 911;\n 910; 909; 908; 907; 906; 905; 904; 903; 902; 901; 900; 899; 898; 897; 896;\n 895; 894; 893; 892; 891; 890; 889; 888; 887; 886; 885; 884; 883; 882; 881;\n 880; 879; 878; 877; 876; 875; 874; 873; 872; 871; 870; 869; 868; 867; 866;\n 865; 864; 863; 862; 861; 860; 859; 858; 857; 856; 855; 854; 853; 852; 851;\n 850; 849; 848; 847; 846; 845; 844; 843; 842; 841; 840; 839; 838; 837; 836;\n 835; 834; 833; 832; 831; 830; 829; 828; 827; 826; 825; 824; 823; 822; 821;\n 820; 819; 818; 817; 816; 815; 814; 813; 812; 811; 810; 809; 808; 807; 806;\n 805; 804; 803; 802; 801; 800; 799; 798; 797; 796; 795; 794; 793; 792; 791;\n 790; 789; 788; 787; 786; 785; 784; 783; 782; 781; 780; 779; 778; 777; 776;\n 775; 774; 773; 772; 771; 770; 769; 768; 767; 766; 765; 764; 763; 762; 761;\n 760; 759; 758; 757; 756; 755; 754; 753; 752; 751; 750; 749; 748; 747; 746;\n 745; 744; 743; 742; 741; 740; 739; 738; 737; 736; 735; 734; 733; 732; 731;\n 730; 729; 728; 727; 726; 725; 724; 723; 722; 721; 720; 719; 718; 717; 716;\n 715; 714; 713; 712; 711; 710; 709; 708; 707; 706; 705; 704; 703; 702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 100000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981; 99980;\n 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970; 99969;\n 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959; 99958;\n 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948; 99947;\n 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937; 99936;\n 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926; 99925;\n 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915; 99914;\n 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903;\n 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892;\n 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871; 99870;\n 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860; 99859;\n 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849; 99848;\n 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838; 99837;\n 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827; 99826;\n 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816; 99815;\n 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805; 99804;\n 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793;\n 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782;\n 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761; 99760;\n 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750; 99749;\n 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739; 99738;\n 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728; 99727;\n 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717; 99716;\n 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706; 99705;\n 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 1000000",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1000000; 999999; 999998; 999997; 999996; 999995; 999994; 999993; 999992;\n 999991; 999990; 999989; 999988; 999987; 999986; 999985; 999984; 999983;\n 999982; 999981; 999980; 999979; 999978; 999977; 999976; 999975; 999974;\n 999973; 999972; 999971; 999970; 999969; 999968; 999967; 999966; 999965;\n 999964; 999963; 999962; 999961; 999960; 999959; 999958; 999957; 999956;\n 999955; 999954; 999953; 999952; 999951; 999950; 999949; 999948; 999947;\n 999946; 999945; 999944; 999943; 999942; 999941; 999940; 999939; 999938;\n 999937; 999936; 999935; 999934; 999933; 999932; 999931; 999930; 999929;\n 999928; 999927; 999926; 999925; 999924; 999923; 999922; 999921; 999920;\n 999919; 999918; 999917; 999916; 999915; 999914; 999913; 999912; 999911;\n 999910; 999909; 999908; 999907; 999906; 999905; 999904; 999903; 999902;\n 999901; 999900; 999899; 999898; 999897; 999896; 999895; 999894; 999893;\n 999892; 999891; 999890; 999889; 999888; 999887; 999886; 999885; 999884;\n 999883; 999882; 999881; 999880; 999879; 999878; 999877; 999876; 999875;\n 999874; 999873; 999872; 999871; 999870; 999869; 999868; 999867; 999866;\n 999865; 999864; 999863; 999862; 999861; 999860; 999859; 999858; 999857;\n 999856; 999855; 999854; 999853; 999852; 999851; 999850; 999849; 999848;\n 999847; 999846; 999845; 999844; 999843; 999842; 999841; 999840; 999839;\n 999838; 999837; 999836; 999835; 999834; 999833; 999832; 999831; 999830;\n 999829; 999828; 999827; 999826; 999825; 999824; 999823; 999822; 999821;\n 999820; 999819; 999818; 999817; 999816; 999815; 999814; 999813; 999812;\n 999811; 999810; 999809; 999808; 999807; 999806; 999805; 999804; 999803;\n 999802; 999801; 999800; 999799; 999798; 999797; 999796; 999795; 999794;\n 999793; 999792; 999791; 999790; 999789; 999788; 999787; 999786; 999785;\n 999784; 999783; 999782; 999781; 999780; 999779; 999778; 999777; 999776;\n 999775; 999774; 999773; 999772; 999771; 999770; 999769; 999768; 999767;\n 999766; 999765; 999764; 999763; 999762; 999761; 999760; 999759; 999758;\n 999757; 999756; 999755; 999754; 999753; 999752; 999751; 999750; 999749;\n 999748; 999747; 999746; 999745; 999744; 999743; 999742; 999741; 999740;\n 999739; 999738; 999737; 999736; 999735; 999734; 999733; 999732; 999731;\n 999730; 999729; 999728; 999727; 999726; 999725; 999724; 999723; 999722;\n 999721; 999720; 999719; 999718; 999717; 999716; 999715; 999714; 999713;\n 999712; 999711; 999710; 999709; 999708; 999707; 999706; 999705; 999704;\n 999703; 999702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 15",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[15; 14; 13; 12; 11; 10; 9; 8; 7; 6; 5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 11",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[11; 10; 9; 8; 7; 6; 5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "listn1 14",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[14; 13; 12; 11; 10; 9; 8; 7; 6; 5; 4; 3; 2; 1; 0]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "length1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "length1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [1000; 999; 998; 997; 996; 995; 994; 993; 992; 991; 990; 989; 988; 987;\n   986; 985; 984; 983; 982; 981; 980; 979; 978; 977; 976; 975; 974; 973; 972;\n   971; 970; 969; 968; 967; 966; 965; 964; 963; 962; 961; 960; 959; 958; 957;\n   956; 955; 954; 953; 952; 951; 950; 949; 948; 947; 946; 945; 944; 943; 942;\n   941; 940; 939; 938; 937; 936; 935; 934; 933; 932; 931; 930; 929; 928; 927;\n   926; 925; 924; 923; 922; 921; 920; 919; 918; 917; 916; 915; 914; 913; 912;\n   911; 910; 909; 908; 907; 906; 905; 904; 903; 902; 901; 900; 899; 898; 897;\n   896; 895; 894; 893; 892; 891; 890; 889; 888; 887; 886; 885; 884; 883; 882;\n   881; 880; 879; 878; 877; 876; 875; 874; 873; 872; 871; 870; 869; 868; 867;\n   866; 865; 864; 863; 862; 861; 860; 859; 858; 857; 856; 855; 854; 853; 852;\n   851; 850; 849; 848; 847; 846; 845; 844; 843; 842; 841; 840; 839; 838; 837;\n   836; 835; 834; 833; 832; 831; 830; 829; 828; 827; 826; 825; 824; 823; 822;\n   821; 820; 819; 818; 817; 816; 815; 814; 813; 812; 811; 810; 809; 808; 807;\n   806; 805; 804; 803; 802; 801; 800; 799; 798; 797; 796; 795; 794; 793; 792;\n   791; 790; 789; 788; 787; 786; 785; 784; 783; 782; 781; 780; 779; 778; 777;\n   776; 775; 774; 773; 772; 771; 770; 769; 768; 767; 766; 765; 764; 763; 762;\n   761; 760; 759; 758; 757; 756; 755; 754; 753; 752; 751; 750; 749; 748; 747;\n   746; 745; 744; 743; 742; 741; 740; 739; 738; 737; 736; 735; 734; 733; 732;\n   731; 730; 729; 728; 727; 726; 725; 724; 723; 722; 721; 720; 719; 718; 717;\n   716; 715; 714; 713; 712; 711; 710; 709; 708; 707; 706; 705; 704; 703; 702;\n   ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1\n  [1000000; 999999; 999998; 999997; 999996; 999995; 999994; 999993; 999992;\n   999991; 999990; 999989; 999988; 999987; 999986; 999985; 999984; 999983;\n   999982; 999981; 999980; 999979; 999978; 999977; 999976; 999975; 999974;\n   999973; 999972; 999971; 999970; 999969; 999968; 999967; 999966; 999965;\n   999964; 999963; 999962; 999961; 999960; 999959; 999958; 999957; 999956;\n   999955; 999954; 999953; 999952; 999951; 999950; 999949; 999948; 999947;\n   999946; 999945; 999944; 999943; 999942; 999941; 999940; 999939; 999938;\n   999937; 999936; 999935; 999934; 999933; 999932; 999931; 999930; 999929;\n   999928; 999927; 999926; 999925; 999924; 999923; 999922; 999921; 999920;\n   999919; 999918; 999917; 999916; 999915; 999914; 999913; 999912; 999911;\n   999910; 999909; 999908; 999907; 999906; 999905; 999904; 999903; 999902;\n   999901; 999900; 999899; 999898; 999897; 999896; 999895; 999894; 999893;\n   999892; 999891; 999890; 999889; 999888; 999887; 999886; 999885; 999884;\n   999883; 999882; 999881; 999880; 999879; 999878; 999877; 999876; 999875;\n   999874; 999873; 999872; 999871; 999870; 999869; 999868; 999867; 999866;\n   999865; 999864; 999863; 999862; 999861; 999860; 999859; 999858; 999857;\n   999856; 999855; 999854; 999853; 999852; 999851; 999850; 999849; 999848;\n   999847; 999846; 999845; 999844; 999843; 999842; 999841; 999840; 999839;\n   999838; 999837; 999836; 999835; 999834; 999833; 999832; 999831; 999830;\n   999829; 999828; 999827; 999826; 999825; 999824; 999823; 999822; 999821;\n   999820; 999819; 999818; 999817; 999816; 999815; 999814; 999813; 999812;\n   999811; 999810; 999809; 999808; 999807; 999806; 999805; 999804; 999803;\n   999802; 999801; 999800; 999799; 999798; 999797; 999796; 999795; 999794;\n   999793; 999792; 999791; 999790; 999789; 999788; 999787; 999786; 999785;\n   999784; 999783; 999782; 999781; 999780; 999779; 999778; 999777; 999776;\n   999775; 999774; 999773; 999772; 999771; 999770; 999769; 999768; 999767;\n   999766; 999765; 999764; 999763; 999762; 999761; 999760; 999759; 999758;\n   999757; 999756; 999755; 999754; 999753; 999752; 999751; 999750; 999749;\n   999748; 999747; 999746; 999745; 999744; 999743; 999742; 999741; 999740;\n   999739; 999738; 999737; 999736; 999735; 999734; 999733; 999732; 999731;\n   999730; 999729; 999728; 999727; 999726; 999725; 999724; 999723; 999722;\n   999721; 999720; 999719; 999718; 999717; 999716; 999715; 999714; 999713;\n   999712; 999711; 999710; 999709; 999708; 999707; 999706; 999705; 999704;\n   999703; 999702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "1000001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [-3; 3; -2; 4; 4; -4; 3; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [0; 1; -5; -5; -1; 2; 1; -3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "length1 [-3; 0; -3; 0; -3; -2; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "7",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571145535.977093
    },
    "6.2_recterm_append": {
      "grade": 100,
      "solution": "let rev_append left right =\n  let rec aux a b= match a with\n    |[] -> b\n    |t::q -> aux q (t::b)\n  in aux left right;;\n\n\nlet append left right =\n  rev_append (List.rev left) right;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "rev_append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "rev_append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]\n  [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20;\n 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39;\n 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58;\n 59; 60; 61; 62; 63; 64; 65; 66; 67; 68; 69; 70; 71; 72; 73; 74; 75; 76; 77;\n 78; 79; 80; 81; 82; 83; 84; 85; 86; 87; 88; 89; 90; 91; 92; 93; 94; 95; 96;\n 97; 98; 99; 100; 101; 102; 103; 104; 105; 106; 107; 108; 109; 110; 111; 112;\n 113; 114; 115; 116; 117; 118; 119; 120; 121; 122; 123; 124; 125; 126; 127;\n 128; 129; 130; 131; 132; 133; 134; 135; 136; 137; 138; 139; 140; 141; 142;\n 143; 144; 145; 146; 147; 148; 149; 150; 151; 152; 153; 154; 155; 156; 157;\n 158; 159; 160; 161; 162; 163; 164; 165; 166; 167; 168; 169; 170; 171; 172;\n 173; 174; 175; 176; 177; 178; 179; 180; 181; 182; 183; 184; 185; 186; 187;\n 188; 189; 190; 191; 192; 193; 194; 195; 196; 197; 198; 199; 200; 201; 202;\n 203; 204; 205; 206; 207; 208; 209; 210; 211; 212; 213; 214; 215; 216; 217;\n 218; 219; 220; 221; 222; 223; 224; 225; 226; 227; 228; 229; 230; 231; 232;\n 233; 234; 235; 236; 237; 238; 239; 240; 241; 242; 243; 244; 245; 246; 247;\n 248; 249; 250; 251; 252; 253; 254; 255; 256; 257; 258; 259; 260; 261; 262;\n 263; 264; 265; 266; 267; 268; 269; 270; 271; 272; 273; 274; 275; 276; 277;\n 278; 279; 280; 281; 282; 283; 284; 285; 286; 287; 288; 289; 290; 291; 292;\n 293; 294; 295; 296; 297; 298; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append\n  [1; 2; 3]\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[3; 2; 1; 100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992;\n 99991; 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n 99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970;\n 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959;\n 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948;\n 99947; 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937;\n 99936; 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926;\n 99925; 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915;\n 99914; 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904;\n 99903; 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893;\n 99892; 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882;\n 99881; 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n 99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860;\n 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849;\n 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838;\n 99837; 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827;\n 99826; 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816;\n 99815; 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805;\n 99804; 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794;\n 99793; 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783;\n 99782; 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772;\n 99771; 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n 99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750;\n 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739;\n 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728;\n 99727; 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717;\n 99716; 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706;\n 99705; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [3; 0; -5] [0; -5; -5; -4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 0; 3; 0; -5; -5; -4; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [-1; 4; -1; -3; -5; 0; -2; 3; 0] [3; -2; -5; -1; -3; 0; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 3; -2; 0; -5; -3; -1; 4; -1; 3; -2; -5; -1; -3; 0; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "rev_append [] [-4; 3; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; 3; -5]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "append",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "append",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]\n  [1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981; 99980;\n 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970; 99969;\n 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959; 99958;\n 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948; 99947;\n 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937; 99936;\n 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926; 99925;\n 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915; 99914;\n 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903;\n 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892;\n 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871; 99870;\n 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860; 99859;\n 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849; 99848;\n 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838; 99837;\n 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827; 99826;\n 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816; 99815;\n 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805; 99804;\n 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793;\n 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782;\n 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761; 99760;\n 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750; 99749;\n 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739; 99738;\n 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728; 99727;\n 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717; 99716;\n 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706; 99705;\n 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append\n  [1; 2; 3]\n  [100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992; 99991;\n   99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n   99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971;\n   99970; 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961;\n   99960; 99959; 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951;\n   99950; 99949; 99948; 99947; 99946; 99945; 99944; 99943; 99942; 99941;\n   99940; 99939; 99938; 99937; 99936; 99935; 99934; 99933; 99932; 99931;\n   99930; 99929; 99928; 99927; 99926; 99925; 99924; 99923; 99922; 99921;\n   99920; 99919; 99918; 99917; 99916; 99915; 99914; 99913; 99912; 99911;\n   99910; 99909; 99908; 99907; 99906; 99905; 99904; 99903; 99902; 99901;\n   99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893; 99892; 99891;\n   99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882; 99881;\n   99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n   99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861;\n   99860; 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851;\n   99850; 99849; 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841;\n   99840; 99839; 99838; 99837; 99836; 99835; 99834; 99833; 99832; 99831;\n   99830; 99829; 99828; 99827; 99826; 99825; 99824; 99823; 99822; 99821;\n   99820; 99819; 99818; 99817; 99816; 99815; 99814; 99813; 99812; 99811;\n   99810; 99809; 99808; 99807; 99806; 99805; 99804; 99803; 99802; 99801;\n   99800; 99799; 99798; 99797; 99796; 99795; 99794; 99793; 99792; 99791;\n   99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783; 99782; 99781;\n   99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772; 99771;\n   99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n   99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751;\n   99750; 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741;\n   99740; 99739; 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731;\n   99730; 99729; 99728; 99727; 99726; 99725; 99724; 99723; 99722; 99721;\n   99720; 99719; 99718; 99717; 99716; 99715; 99714; 99713; 99712; 99711;\n   99710; 99709; 99708; 99707; 99706; 99705; 99704; 99703; 99702; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 2; 3; 100000; 99999; 99998; 99997; 99996; 99995; 99994; 99993; 99992;\n 99991; 99990; 99989; 99988; 99987; 99986; 99985; 99984; 99983; 99982; 99981;\n 99980; 99979; 99978; 99977; 99976; 99975; 99974; 99973; 99972; 99971; 99970;\n 99969; 99968; 99967; 99966; 99965; 99964; 99963; 99962; 99961; 99960; 99959;\n 99958; 99957; 99956; 99955; 99954; 99953; 99952; 99951; 99950; 99949; 99948;\n 99947; 99946; 99945; 99944; 99943; 99942; 99941; 99940; 99939; 99938; 99937;\n 99936; 99935; 99934; 99933; 99932; 99931; 99930; 99929; 99928; 99927; 99926;\n 99925; 99924; 99923; 99922; 99921; 99920; 99919; 99918; 99917; 99916; 99915;\n 99914; 99913; 99912; 99911; 99910; 99909; 99908; 99907; 99906; 99905; 99904;\n 99903; 99902; 99901; 99900; 99899; 99898; 99897; 99896; 99895; 99894; 99893;\n 99892; 99891; 99890; 99889; 99888; 99887; 99886; 99885; 99884; 99883; 99882;\n 99881; 99880; 99879; 99878; 99877; 99876; 99875; 99874; 99873; 99872; 99871;\n 99870; 99869; 99868; 99867; 99866; 99865; 99864; 99863; 99862; 99861; 99860;\n 99859; 99858; 99857; 99856; 99855; 99854; 99853; 99852; 99851; 99850; 99849;\n 99848; 99847; 99846; 99845; 99844; 99843; 99842; 99841; 99840; 99839; 99838;\n 99837; 99836; 99835; 99834; 99833; 99832; 99831; 99830; 99829; 99828; 99827;\n 99826; 99825; 99824; 99823; 99822; 99821; 99820; 99819; 99818; 99817; 99816;\n 99815; 99814; 99813; 99812; 99811; 99810; 99809; 99808; 99807; 99806; 99805;\n 99804; 99803; 99802; 99801; 99800; 99799; 99798; 99797; 99796; 99795; 99794;\n 99793; 99792; 99791; 99790; 99789; 99788; 99787; 99786; 99785; 99784; 99783;\n 99782; 99781; 99780; 99779; 99778; 99777; 99776; 99775; 99774; 99773; 99772;\n 99771; 99770; 99769; 99768; 99767; 99766; 99765; 99764; 99763; 99762; 99761;\n 99760; 99759; 99758; 99757; 99756; 99755; 99754; 99753; 99752; 99751; 99750;\n 99749; 99748; 99747; 99746; 99745; 99744; 99743; 99742; 99741; 99740; 99739;\n 99738; 99737; 99736; 99735; 99734; 99733; 99732; 99731; 99730; 99729; 99728;\n 99727; 99726; 99725; 99724; 99723; 99722; 99721; 99720; 99719; 99718; 99717;\n 99716; 99715; 99714; 99713; 99712; 99711; 99710; 99709; 99708; 99707; 99706;\n 99705; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [] [2; -1; -1; 4; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; -1; -1; 4; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [-1; 2; -2; 4; -2; -5] [1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1; 2; -2; 4; -2; -5; 1; -1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "append [4; -3; 4; 3; -4; -1; 3; 4; 2] [-1; -2; -1; -1; -1; 1; 1; -1; -2; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; -3; 4; 3; -4; -1; 3; 4; 2; -1; -2; -1; -1; -1; 1; 1; -1; -2; -4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571145767.771921
    },
    "6.3_recterm_arbres": {
      "grade": 100,
      "solution": "let rec size1 a = match a with\n    Nil -> 0\n  |Node(x,g,d) -> 1+size1 g + size1 d;;\n\nlet rec size' l n = match l with\n    []-> n\n  |t::q -> match t with\n    |Nil -> size' (q) n\n    |Node(x,g,d) ->\n        size'(g::d::q )(n+1);;\n\n\nlet size a = size' [a] 0;;\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "size1",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (4,\n    Node (1,\n     Node (-1, Nil,\n      Node (4, Node (1, Nil, Node (-1, Node (-4, Nil, Nil), Nil)), Nil)),\n     Node (-2, Nil, Nil)),\n    Nil))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-1, Nil,\n    Node (-2,\n     Node (-4, Node (-4, Nil, Nil),\n      Node (2, Node (2, Nil, Node (1, Nil, Nil)), Nil)),\n     Node (-2, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (-3,\n    Node (-1, Node (-2, Nil, Nil), Node (1, Node (4, Nil, Nil), Nil)),\n    Node (4, Node (-3, Nil, Nil), Node (-5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1\n  (Node (1,\n    Node (4, Node (4, Nil, Nil),\n     Node (2, Nil, Node (2, Node (2, Nil, Nil), Nil))),\n    Node (-2, Nil, Node (-5, Nil, Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "8",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size1",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('v', Nil, Node ('z', Node ('u', Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('w', Nil, Node ('t', Node ('d', Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('o', Node ('b', Nil, Nil), Node ('p', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size1 (Node ('u', Node ('j', Nil, Nil), Node ('o', Nil, Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "3",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "size'",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size'",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('g',\n    Node ('c',\n     Node ('b',\n      Node ('p',\n       Node ('v',\n        Node ('w',\n         Node ('h',\n          Node ('g',\n           Node ('s',\n            Node ('y',\n             Node ('p',\n              Node ('e',\n               Node ('y',\n                Node ('z',\n                 Node ('n',\n                  Node ('e',\n                   Node ('q',\n                    Node ('k',\n                     Node ('r',\n                      Node ('u',\n                       Node ('w',\n                        Node ('o',\n                         Node ('i',\n                          Node ('m',\n                           Node ('c',\n                            Node ('o',\n                             Node ('c',\n                              Node ('g',\n                               Node ('p',\n                                Node ('h',\n                                 Node ('d',\n                                  Node ('k',\n                                   Node ('h',\n                                    Node ('k',\n                                     Node ('r',\n                                      Node ('q',\n                                       Node ('r',\n                                        Node ('c',\n                                         Node ('a',\n                                          Node ('r',\n                                           Node ('h',\n                                            Node ('q',\n                                             Node ('s',\n                                              Node ('z',\n                                               Node ('g',\n                                                Node ('k',\n                                                 Node ('l',\n                                                  Node ('g',\n                                                   Node ('k',\n                                                    Node ('z',\n                                                     Node ('u',\n                                                      Node ('f',\n                                                       Node ('t',\n                                                        Node ('n',\n                                                         Node ('v',\n                                                          Node ('v',\n                                                           Node ('v',\n                                                            Node ('s',\n                                                             Node ('m',\n                                                              Node ('f',\n                                                               Node ('g',\n                                                                Node ('v',\n                                                                 Node ('n',\n                                                                  Node ('u',\n                                                                   Node ('t',\n                                                                    Node\n                                                                    ('y',\n                                                                    Node\n                                                                    ('i',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('i',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('b',\n                                                                    Node\n                                                                    ('m',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('c',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('b',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('q',\n                                                                    Node\n                                                                    ('l',\n                                                                    Node\n                                                                    ('e',\n                                                                    Node\n                                                                    ('j',\n                                                                    Node\n                                                                    ('h',\n                                                                    Node\n                                                                    ('c',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('m',\n                                                                    Node\n                                                                    ('r',\n                                                                    Node\n                                                                    (...),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                   Nil),\n                                                                  Nil),\n                                                                 Nil),\n                                                                Nil),\n                                                               Nil),\n                                                              Nil),\n                                                             Nil),\n                                                            Nil),\n                                                           Nil),\n                                                          Nil),\n                                                         Nil),\n                                                        Nil),\n                                                       Nil),\n                                                      Nil),\n                                                     Nil),\n                                                    Nil),\n                                                   Nil),\n                                                  Nil),\n                                                 Nil),\n                                                Nil),\n                                               Nil),\n                                              Nil),\n                                             Nil),\n                                            Nil),\n                                           Nil),\n                                          Nil),\n                                         Nil),\n                                        Nil),\n                                       Nil),\n                                      Nil),\n                                     Nil),\n                                    Nil),\n                                   Nil),\n                                  Nil),\n                                 Nil),\n                                Nil),\n                               Nil),\n                              Nil),\n                             Nil),\n                            Nil),\n                           Nil),\n                          Nil),\n                         Nil),\n                        Nil),\n                       Nil),\n                      Nil),\n                     Nil),\n                    Nil),\n                   Nil),\n                  Nil),\n                 Nil),\n                Nil),\n               Nil),\n              Nil),\n             Nil),\n            Nil),\n           Nil),\n          Nil),\n         Nil),\n        Nil),\n       Nil),\n      Nil),\n     ...),\n    ...);\n   ...]\n  5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100006",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('k', Nil, Nil); Node ('a', Nil, Nil); Node ('v', Nil, Nil);\n   Node ('q', Nil, Nil); Node ('e', Nil, Nil); Node ('d', Nil, Nil);\n   Node ('p', Nil, Nil); Node ('k', Nil, Nil); Node ('f', Nil, Nil);\n   Node ('a', Nil, Nil); Node ('b', Nil, Nil); Node ('j', Nil, Nil);\n   Node ('a', Nil, Nil); Node ('u', Nil, Nil); Node ('e', Nil, Nil);\n   Node ('p', Nil, Nil); Node ('r', Nil, Nil); Node ('e', Nil, Nil);\n   Node ('m', Nil, Nil); Node ('v', Nil, Nil); Node ('n', Nil, Nil);\n   Node ('b', Nil, Nil); Node ('r', Nil, Nil); Node ('a', Nil, Nil);\n   Node ('r', Nil, Nil); Node ('u', Nil, Nil); Node ('w', Nil, Nil);\n   Node ('h', Nil, Nil); Node ('z', Nil, Nil); Node ('j', Nil, Nil);\n   Node ('j', Nil, Nil); Node ('w', Nil, Nil); Node ('d', Nil, Nil);\n   Node ('h', Nil, Nil); Node ('o', Nil, Nil); Node ('x', Nil, Nil);\n   Node ('l', Nil, Nil); Node ('m', Nil, Nil); Node ('p', Nil, Nil);\n   Node ('v', Nil, Nil); Node ('y', Nil, Nil); Node ('q', Nil, Nil);\n   Node ('q', Nil, Nil); Node ('g', Nil, Nil); Node ('b', Nil, Nil);\n   Node ('h', Nil, Nil); Node ('p', Nil, Nil); Node ('k', Nil, Nil);\n   Node ('m', Nil, Nil); Node ('r', Nil, Nil); Node ('h', Nil, Nil);\n   Node ('r', Nil, Nil); Node ('n', Nil, Nil); Node ('s', Nil, Nil);\n   Node ('a', Nil, Nil); Node ('z', Nil, Nil); Node ('x', Nil, Nil);\n   Node ('i', Nil, Nil); Node ('e', Nil, Nil); Node ('e', Nil, Nil);\n   Node ('l', Nil, Nil); Node ('u', Nil, Nil); Node ('f', Nil, Nil);\n   Node ('t', Nil, Nil); Node ('h', Nil, Nil); Node ('b', Nil, Nil);\n   Node ('b', Nil, Nil); Node ('x', Nil, Nil); Node ('k', Nil, Nil);\n   Node ('z', Nil, Nil); Node ('g', Nil, Nil); Node ('f', Nil, Nil);\n   Node ('a', Nil, Nil); Node ('z', Nil, Nil); Node ('o', Nil, ...); ...]\n  42",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100043",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('v',\n    Node ('w', Node ('l', Nil, Nil),\n     Node ('j', Nil,\n      Node ('q',\n       Node ('i', Node ('l', Nil, Node ('e', Nil, Node ('n', Nil, Nil))),\n        Nil),\n       Nil))),\n    Nil);\n   Node ('t',\n    Node ('j', Nil, Node ('o', Node ('w', Nil, Nil), Node ('i', Nil, Nil))),\n    Node ('y', Node ('u', Nil, Nil), Node ('q', Nil, Node ('q', Nil, Nil))))]\n  3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "21",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size'\n  [Node ('g', Node ('j', Node ('c', Nil, Nil), Nil),\n    Node ('l', Node ('g', Nil, Nil), Nil))]\n  4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "9",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size' [] 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "2",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "size",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "size",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node ('h',\n    Node ('r',\n     Node ('e',\n      Node ('w',\n       Node ('u',\n        Node ('p',\n         Node ('p',\n          Node ('b',\n           Node ('m',\n            Node ('u',\n             Node ('q',\n              Node ('p',\n               Node ('d',\n                Node ('m',\n                 Node ('g',\n                  Node ('b',\n                   Node ('f',\n                    Node ('d',\n                     Node ('y',\n                      Node ('f',\n                       Node ('y',\n                        Node ('i',\n                         Node ('r',\n                          Node ('e',\n                           Node ('t',\n                            Node ('d',\n                             Node ('v',\n                              Node ('u',\n                               Node ('c',\n                                Node ('y',\n                                 Node ('a',\n                                  Node ('p',\n                                   Node ('m',\n                                    Node ('y',\n                                     Node ('j',\n                                      Node ('n',\n                                       Node ('s',\n                                        Node ('j',\n                                         Node ('u',\n                                          Node ('u',\n                                           Node ('p',\n                                            Node ('r',\n                                             Node ('c',\n                                              Node ('e',\n                                               Node ('g',\n                                                Node ('j',\n                                                 Node ('k',\n                                                  Node ('a',\n                                                   Node ('k',\n                                                    Node ('w',\n                                                     Node ('s',\n                                                      Node ('n',\n                                                       Node ('h',\n                                                        Node ('t',\n                                                         Node ('e',\n                                                          Node ('j',\n                                                           Node ('d',\n                                                            Node ('h',\n                                                             Node ('u',\n                                                              Node ('g',\n                                                               Node ('k',\n                                                                Node ('k',\n                                                                 Node ('r',\n                                                                  Node ('w',\n                                                                   Node ('n',\n                                                                    Node\n                                                                    ('a',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('h',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('i',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('o',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('f',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('k',\n                                                                    Node\n                                                                    ('i',\n                                                                    Node\n                                                                    ('c',\n                                                                    Node\n                                                                    ('h',\n                                                                    Node\n                                                                    ('k',\n                                                                    Node\n                                                                    ('o',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('v',\n                                                                    Node\n                                                                    ('x',\n                                                                    Node\n                                                                    ('t',\n                                                                    Node\n                                                                    ('b',\n                                                                    Node\n                                                                    ('w',\n                                                                    Node\n                                                                    ('u',\n                                                                    Node\n                                                                    ('s',\n                                                                    Node\n                                                                    ('d',\n                                                                    Node\n                                                                    ('p',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('n',\n                                                                    Node\n                                                                    ('z',\n                                                                    Node\n                                                                    ('o',\n                                                                    Node\n                                                                    ('d',\n                                                                    Node\n                                                                    (...),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                    Nil),\n                                                                   Nil),\n                                                                  Nil),\n                                                                 Nil),\n                                                                Nil),\n                                                               Nil),\n                                                              Nil),\n                                                             Nil),\n                                                            Nil),\n                                                           Nil),\n                                                          Nil),\n                                                         Nil),\n                                                        Nil),\n                                                       Nil),\n                                                      Nil),\n                                                     Nil),\n                                                    Nil),\n                                                   Nil),\n                                                  Nil),\n                                                 Nil),\n                                                Nil),\n                                               Nil),\n                                              Nil),\n                                             Nil),\n                                            Nil),\n                                           Nil),\n                                          Nil),\n                                         Nil),\n                                        Nil),\n                                       Nil),\n                                      Nil),\n                                     Nil),\n                                    Nil),\n                                   Nil),\n                                  Nil),\n                                 Nil),\n                                Nil),\n                               Nil),\n                              Nil),\n                             Nil),\n                            Nil),\n                           Nil),\n                          Nil),\n                         Nil),\n                        Nil),\n                       Nil),\n                      Nil),\n                     Nil),\n                    Nil),\n                   Nil),\n                  Nil),\n                 Nil),\n                Nil),\n               Nil),\n              Nil),\n             Nil),\n            Nil),\n           Nil),\n          Nil),\n         Nil),\n        Nil),\n       ...),\n      ...),\n     ...),\n    ...))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "100001",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node ('i', Nil,\n    Node ('h', Node ('c', Nil, Nil), Node ('k', Node ('i', Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node ('x', Node ('y', Node ('n', Nil, Nil), Nil),\n    Node ('q', Node ('m', Nil, Nil), Nil)))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "size\n  (Node ('x', Node ('c', Nil, Nil),\n    Node ('w', Nil, Node ('s', Node ('p', Nil, Nil), Nil))))",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "5",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571228474.960022
    },
    "6.4_recterm_listes": {
      "grade": 95,
      "solution": "let rev_append left right =\n  let rec aux a b= match a with\n    |[] -> b\n    |t::q -> aux q (t::b)\n  in aux left right;;\n\nlet append left right =\n  rev_append (List.rev left) right;;\n\nlet  insert x l =\n  let rec aux x1 l1 acc =match l1 with\n    | []-> rev_append acc [x1]\n    | a::q ->\n        if a <x1  then aux x1 q  (a::acc) \n        else if a=x1 then rev_append acc l1\n        else rev_append acc (x1::a::q)\n  in aux x l [];; \n\nlet sort l =\n  let rec aux li acc= match li with\n      []-> acc\n    |t::q -> aux q (insert t acc) \n  in aux l [];;\n\nlet rec union_sorted l1 l2 = \n  if List.length l1 =0 then l2\n  else if List.length l2=0 then l1\n  else if List.hd l1 < List.hd l2 then List.hd l1 :: union_sorted (List.tl l1) l2\n  else if List.hd l1 = List.hd l2 then union_sorted (List.tl l1) l2\n  else List.hd l2 :: union_sorted l1 (List.tl l2);;\n\nlet rec appartient e l= match l with\n  |[] -> false;\n  |a::q -> a=e || appartient e q ;;\nlet rec remove x = function\n  | [] -> failwith \"x not in list\"\n  | h::t -> if h = x then t else h::(remove x t);;\n\nlet rec inter_sorted a b= match a with\n  | [] -> if b = [] then [] else  inter_sorted b a\n  | h::t ->\n      if appartient h b then\n        let b' = remove h b in\n        h::(inter_sorted t b')\n      else\n        inter_sorted t b;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "insert",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "insert",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 5 []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[5]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert 8 [1; 3; 8; 8; 15]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[1; 3; 8; 8; 15]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  200002\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n 40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74; 76;\n 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108; 110;\n 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138; 140;\n 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168; 170;\n 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198; 200;\n 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228; 230;\n 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258; 260;\n 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288; 290;\n 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318; 320;\n 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348; 350;\n 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378; 380;\n 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408; 410;\n 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438; 440;\n 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468; 470;\n 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498; 500;\n 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528; 530;\n 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558; 560;\n 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588; 590;\n 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  202\n  [-485; -480; -475; -430; -419; -416; -381; -329; -325; -282; -271; -257;\n   -241; -236; -160; -113; -110; -46; -40; 3; 19; 45; 215; 257; 282; 314;\n   361; 382; 382; 475; 477]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-485; -480; -475; -430; -419; -416; -381; -329; -325; -282; -271; -257;\n -241; -236; -160; -113; -110; -46; -40; 3; 19; 45; 202; 215; 257; 282; 314;\n 361; 382; 382; 475; 477]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  439\n  [-441; -401; -379; -319; -177; -168; -163; -149; -128; -89; 35; 60; 64;\n   113; 117; 162; 174; 185; 271; 278; 282; 305; 307; 343; 380; 394; 401; 433;\n   438; 444; 484]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-441; -401; -379; -319; -177; -168; -163; -149; -128; -89; 35; 60; 64; 113;\n 117; 162; 174; 185; 271; 278; 282; 305; 307; 343; 380; 394; 401; 433; 438;\n 439; 444; 484]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  -477\n  [-342; -334; -325; -311; -229; -224; -207; -194; -186; -160; -124; -80; 4;\n   59; 105; 132; 140; 144; 150; 155; 158; 205; 207; 311; 315; 356; 400; 422;\n   438; 466; 483]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-477; -342; -334; -325; -311; -229; -224; -207; -194; -186; -160; -124; -80;\n 4; 59; 105; 132; 140; 144; 150; 155; 158; 205; 207; 311; 315; 356; 400; 422;\n 438; 466; 483]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  168\n  [-445; -435; -409; -378; -378; -340; -302; -285; -277; -144; -69; -63; -62;\n   -58; -50; -39; -27; 3; 6; 17; 19; 45; 54; 81; 82; 165; 255; 347; 422; 444;\n   478]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-445; -435; -409; -378; -378; -340; -302; -285; -277; -144; -69; -63; -62;\n -58; -50; -39; -27; 3; 6; 17; 19; 45; 54; 81; 82; 165; 168; 255; 347; 422;\n 444; 478]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  -154\n  [-462; -436; -418; -409; -381; -373; -283; -250; -199; -197; -154; -148;\n   -111; -76; -22; -11; -2; 3; 30; 77; 88; 90; 132; 199; 217; 252; 252; 255;\n   357; 394; 493]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-462; -436; -418; -409; -381; -373; -283; -250; -199; -197; -154; -148;\n -111; -76; -22; -11; -2; 3; 30; 77; 88; 90; 132; 199; 217; 252; 252; 255;\n 357; 394; 493]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  285\n  [-433; -416; -359; -356; -327; -303; -224; -203; -199; -189; -150; -79;\n   -68; -51; -37; -9; 111; 140; 149; 165; 180; 194; 218; 235; 251; 264; 331;\n   356; 414; 475; 478]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-433; -416; -359; -356; -327; -303; -224; -203; -199; -189; -150; -79; -68;\n -51; -37; -9; 111; 140; 149; 165; 180; 194; 218; 235; 251; 264; 285; 331;\n 356; 414; 475; 478]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  398\n  [-440; -404; -378; -374; -371; -369; -349; -337; -308; -251; -206; -192;\n   -124; -112; -78; 22; 90; 104; 224; 264; 282; 403; 420; 427; 432; 442; 468;\n   476; 478; 485; 497]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-440; -404; -378; -374; -371; -369; -349; -337; -308; -251; -206; -192;\n -124; -112; -78; 22; 90; 104; 224; 264; 282; 398; 403; 420; 427; 432; 442;\n 468; 476; 478; 485; 497]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "insert\n  387\n  [-480; -471; -459; -410; -410; -351; -336; -311; -247; -202; -164; -145;\n   -140; -74; -58; -26; -4; 19; 54; 100; 103; 138; 170; 176; 212; 252; 265;\n   272; 384; 433; 435]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-480; -471; -459; -410; -410; -351; -336; -311; -247; -202; -164; -145;\n -140; -74; -58; -26; -4; 19; 54; 100; 103; 138; 170; 176; 212; 252; 265;\n 272; 384; 387; 433; 435]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "sort",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "sort",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort\n  [-5; 4; 3; -2; -1; 3; 3; -1; -5; -7; -10; -3; -4; -8; 6; 3; 9; 1; -9; -6;\n   2; -2; 3; 6; 9; 7; 8; -2; 0; -5; -4; -7; -8; 3; 3; -6; -7; -4; -3; -4; 9;\n   -5; -8; -6; 2; -2; 7; 9; 7; 6; -6; -6; -2; -2; 3; 9; -7; -10; 1; -3; -6;\n   8; -1; 6; 9; -4; 9; 3; 8; -9; -1; 2; -1; 8; 0; -10; 1; -6; -1; 5; -7; -6;\n   8; -6; -3; -2; 9; -8; -10; 4; 2; -10; 8; 4; -2; 5; -8; -6; 1; -4; -5; 7;\n   5; -10; 3; 0; -7; -10; -7; 6; -7; -8; -8; 1; 9; -10; 1; 3; 4; 0; -8; 3; 5;\n   -1; 3; -10; -4; 6; 5; 6; 4; -1; 5; 3; 5; -3; -4; 5; 1; 7; -1; -6; -1; 7;\n   9; 6; -5; -9; 4; -2; 2; 0; 6; 5; 5; 7; 9; 8; -7; 6; 0; -10; 9; 8; -7; 9;\n   -6; 9; -3; 8; -10; -9; -10; -6; 9; -5; 3; -9; 5; -3; 8; -8; -3; 2; -3; 2;\n   0; 9; 8; 0; 1; 8; 7; -10; -4; -9; -7; 8; -6; -7; -2; 1; 6; -10; -3; -6;\n   -5; -1; -8; -4; -7; -7; -2; 3; -3; -5; 6; 0; 3; -1; 3; -6; -3; -4; -10; 7;\n   -10; 5; -9; 7; -3; 8; 3; -1; 8; 2; 2; -2; -2; 4; -8; -3; -7; -1; 7; -4; 9;\n   -2; 5; 9; 0; 9; 5; -6; 7; 8; 0; -8; -4; 4; 2; -5; 7; 0; 8; 2; 7; 1; 5; 6;\n   -4; 6; 0; -2; -6; 1; 0; -8; -1; 1; -6; -1; -7; -10; 5; 7; -7; -7; 8; -10;\n   -5; -3; -7; 9; -3; -10; -2; 3; -1; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-10; -9; -8; -7; -6; -5; -4; -3; -2; -1; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-2; -2; -1; 2; 4; 1; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-2; -1; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [2; 2; 0; -5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-4; 4; 3; 3; -2; 1; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -2; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-1; -4; 2; 3; -4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [3; -5; -4; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; 1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-5; 0; 1; -2; -4; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -2; 0; 1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [-2; 1; 4; -5; 1; 2; 0]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -2; 0; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "sort [2; -4; 0; -1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -1; 0; 2]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "union_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "union_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]\n  [1; 3; 5; 7; 9; 11; 13; 15; 17; 19; 21; 23; 25; 27; 29; 31; 33; 35; 37; 39;\n   41; 43; 45; 47; 49; 51; 53; 55; 57; 59; 61; 63; 65; 67; 69; 71; 73; 75;\n   77; 79; 81; 83; 85; 87; 89; 91; 93; 95; 97; 99; 101; 103; 105; 107; 109;\n   111; 113; 115; 117; 119; 121; 123; 125; 127; 129; 131; 133; 135; 137; 139;\n   141; 143; 145; 147; 149; 151; 153; 155; 157; 159; 161; 163; 165; 167; 169;\n   171; 173; 175; 177; 179; 181; 183; 185; 187; 189; 191; 193; 195; 197; 199;\n   201; 203; 205; 207; 209; 211; 213; 215; 217; 219; 221; 223; 225; 227; 229;\n   231; 233; 235; 237; 239; 241; 243; 245; 247; 249; 251; 253; 255; 257; 259;\n   261; 263; 265; 267; 269; 271; 273; 275; 277; 279; 281; 283; 285; 287; 289;\n   291; 293; 295; 297; 299; 301; 303; 305; 307; 309; 311; 313; 315; 317; 319;\n   321; 323; 325; 327; 329; 331; 333; 335; 337; 339; 341; 343; 345; 347; 349;\n   351; 353; 355; 357; 359; 361; 363; 365; 367; 369; 371; 373; 375; 377; 379;\n   381; 383; 385; 387; 389; 391; 393; 395; 397; 399; 401; 403; 405; 407; 409;\n   411; 413; 415; 417; 419; 421; 423; 425; 427; 429; 431; 433; 435; 437; 439;\n   441; 443; 445; 447; 449; 451; 453; 455; 457; 459; 461; 463; 465; 467; 469;\n   471; 473; 475; 477; 479; 481; 483; 485; 487; 489; 491; 493; 495; 497; 499;\n   501; 503; 505; 507; 509; 511; 513; 515; 517; 519; 521; 523; 525; 527; 529;\n   531; 533; 535; 537; 539; 541; 543; 545; 547; 549; 551; 553; 555; 557; 559;\n   561; 563; 565; 567; 569; 571; 573; 575; 577; 579; 581; 583; 585; 587; 589;\n   591; 593; 595; 597; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Stack overflow. Too many recursions?"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [] [-1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; -2; -1; 1; 2; 3] [-5; -3; -1; 0; 1; 1; 2; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -2; -1; 0; 1; 1; 2; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [2] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -4; -4; -3; -2; -1; 4] []",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -4; -3; -2; -1; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3; -3; -2; 0; 3] [-2; 1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4; -3; -3; -2; 0; 1; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-4; -3; -3; 1; 3] [-5; -4; -2; -2; 0; 0; 2; 3; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; -3; -2; -2; 0; 0; 1; 2; 3; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-5; -3; -1; 3; 3; 4] [-3; -3; -2; -1; 1; 1; 2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -3; -3; -2; -1; 1; 1; 2; 3; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-1; 1; 3] [-3; -3; -3; 3; 4; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -3; -3; -1; 1; 3; 4; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "union_sorted [-3; -2; -2; 0; 1; 2; 2; 3; 4] [-2; -2; -2; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -2; -2; 0; 1; 2; 2; 3; 4]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "inter_sorted",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "inter_sorted",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]\n  [0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 38;\n   40; 42; 44; 46; 48; 50; 52; 54; 56; 58; 60; 62; 64; 66; 68; 70; 72; 74;\n   76; 78; 80; 82; 84; 86; 88; 90; 92; 94; 96; 98; 100; 102; 104; 106; 108;\n   110; 112; 114; 116; 118; 120; 122; 124; 126; 128; 130; 132; 134; 136; 138;\n   140; 142; 144; 146; 148; 150; 152; 154; 156; 158; 160; 162; 164; 166; 168;\n   170; 172; 174; 176; 178; 180; 182; 184; 186; 188; 190; 192; 194; 196; 198;\n   200; 202; 204; 206; 208; 210; 212; 214; 216; 218; 220; 222; 224; 226; 228;\n   230; 232; 234; 236; 238; 240; 242; 244; 246; 248; 250; 252; 254; 256; 258;\n   260; 262; 264; 266; 268; 270; 272; 274; 276; 278; 280; 282; 284; 286; 288;\n   290; 292; 294; 296; 298; 300; 302; 304; 306; 308; 310; 312; 314; 316; 318;\n   320; 322; 324; 326; 328; 330; 332; 334; 336; 338; 340; 342; 344; 346; 348;\n   350; 352; 354; 356; 358; 360; 362; 364; 366; 368; 370; 372; 374; 376; 378;\n   380; 382; 384; 386; 388; 390; 392; 394; 396; 398; 400; 402; 404; 406; 408;\n   410; 412; 414; 416; 418; 420; 422; 424; 426; 428; 430; 432; 434; 436; 438;\n   440; 442; 444; 446; 448; 450; 452; 454; 456; 458; 460; 462; 464; 466; 468;\n   470; 472; 474; 476; 478; 480; 482; 484; 486; 488; 490; 492; 494; 496; 498;\n   500; 502; 504; 506; 508; 510; 512; 514; 516; 518; 520; 522; 524; 526; 528;\n   530; 532; 534; 536; 538; 540; 542; 544; 546; 548; 550; 552; 554; 556; 558;\n   560; 562; 564; 566; 568; 570; 572; 574; 576; 578; 580; 582; 584; 586; 588;\n   590; 592; 594; 596; ...]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Stack overflow. Too many recursions?"
                }
              ],
              "result": "failure"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; 0] [0; 0; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-3; -1; 0] [-4; -4; -3; -2; 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-3; -3; -2; -2; 1; 2; 3] [-5; -5; -4; -3; -2; -2; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-3; -2; -2; 1]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [] [-5; -3; -3; -2; 1; 3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-4] [-4; -3; -1; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-4]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [0] [-1; 0; 1; 1; 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[0]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [0; 1; 3; 3; 3] [-5]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -5; -4; -3; -3; -2; 1; 2; 3] [-5; -4; -3; 0; 2; 3; 3]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[-5; -4; -3; 2; 3]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "inter_sorted [-5; -4; -2; 0] [3; 4]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571934028.23624
    },
    "7.1_morpion_simple_debut": {
      "grade": 100,
      "solution": "let plateau_initial (taille : int) : plateau =\n  Matrix.init taille (fun x -> None);;\n  \nlet coup_legal (plateau : plateau) (coup : coup) : bool =\n  Matrix.get plateau(coup.position)= None;;\n  \nlet coup_des_coordonnees_absolues\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (nb_joueurs : int)\n    (x , y : int*int)\n  : coup option =\n  if ( x<0 || x>= Matrix.size(plateau) || y<0 || y>= Matrix.size(plateau))\n  then None\n  else \n    match dernier_coup with\n    |None-> Some{joueur =0; position= (x,y)}\n    |Some s-> \n        if(s.joueur+1>= nb_joueurs ) then Some ({joueur=0 ;position=(x,y)})\n        else Some({ joueur= (s.joueur+1); position=(x,y)})\n  \n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "plateau_initial",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "plateau_initial",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "coup_legal",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_legal",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal <abstr> {joueur = 0; position = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal <abstr> {joueur = 1; position = (0, 0)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal <abstr> {joueur = 0; position = (2, 2)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal <abstr> {joueur = 0; position = (0, 3)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal <abstr> {joueur = 0; position = (3, 2)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "coup_des_coordonnees_absolues",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_des_coordonnees_absolues",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues <abstr> None 2 (2, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position = (2, 2)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position = (3, 1)})\n  2\n  (3, 3)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position = (3, 3)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 0; position = (2, 2)})\n  2\n  (0, 1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 1; position = (0, 1)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position = (3, 2)})\n  2\n  (-1, 3)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position = (1, 1)})\n  2\n  (1, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position = (1, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position = (0, 1)})\n  2\n  (4, 2)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1571836022.241655
    },
    "7.2_morpion_simple_victoire": {
      "grade": 100,
      "solution": "let  ligne (m : 'a Matrix.t) (i : int) : 'a list =\n  let rec  aux m' acc i' j= match j with\n      0 -> Matrix.get m' (i',0)::acc\n    |_ -> aux m' (Matrix.get m' (i,j) :: acc) i' (j-1)\n  in aux m [] i ((Matrix.size m) -1) ;;\n    \n  \n\nlet colonne (m : 'a Matrix.t) (j : int) : 'a list =\n  let rec  aux m' acc i' j= match j with\n      0 -> Matrix.get m' (0,i')::acc\n    |_ -> aux m' (Matrix.get m' (j,i') :: acc) i' (j-1)\n  in aux m [] j ((Matrix.size m) -1) ;;\n  \n\nlet diagonale (m : 'a Matrix.t) (k : int) : 'a list =\n  if(k=0) then \n    let rec  aux m' acc j= match j with\n        0 -> Matrix.get m' (0,0)::acc\n      |_ -> aux m' (Matrix.get m' (j,j) :: acc) (j-1)\n    in aux m [] ((Matrix.size m) -1) \n  else \n    let rec  aux m' acc i' j=\n      if(i'=(Matrix.size m) -1) then List.rev (Matrix.get m' (i',0)::acc)\n      else aux m' (Matrix.get m' (i',j) :: acc) (i'+1) (j-1)\n    in aux m [] 0 ((Matrix.size m) -1) ;;\n  \nlet rec valeur_constante (l : 'a option list) : 'a option = match l with\n  | [] -> None \n  | [x] -> x\n  | x::q -> \n      if x = (valeur_constante q) then x \n      else None \n;;\n\nlet gagnant_lignes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (ligne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_colonnes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (colonne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_diagonales (m : 'a option Matrix.t) : 'a option =\n  if valeur_constante (diagonale m 0)!= None then valeur_constante (diagonale m 0)\n  else valeur_constante (diagonale m 1) \n;;\n\nlet gagnant (m : 'a option Matrix.t) : 'a option =\n  if(gagnant_diagonales(m)!=None) then gagnant_diagonales (m)\n  else if (gagnant_colonnes(m) !=None) then gagnant_colonnes(m)\n  else if(gagnant_lignes(m)!=None) then gagnant_lignes(m)\n  else None;;\n\nlet termine (m : 'a option Matrix.t) : bool =\n  if( gagnant (m) !=None) then true\n  else false\n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "ligne",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "ligne",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[2; 39]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[70; 45]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[16; 70]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[49]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "ligne <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[90; 77]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "colonne",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "colonne",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne <abstr> 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[4; 13; 18; 79]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[6; 24]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[46]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[84; 60; 77]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "colonne <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[79; 75; 91]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "diagonale",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "diagonale",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[69; 20; 89; 71]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[30; 54; 62; 74]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[35]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale <abstr> 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[94; 11]",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "diagonale <abstr> 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "[73; 71; 15; 57]",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4: "
            },
            {
              "text": "valeur_constante",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "valeur_constante",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "valeur_constante [Some 1; None; Some 1]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "valeur_constante [Some 2; Some 2; Some 2; Some 2]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 2)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "valeur_constante [None; None]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "valeur_constante [Some (-1); Some (-1); Some (-1); Some (-2)]",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5: "
            },
            {
              "text": "gagnant_lignes",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_lignes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_lignes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 6: "
            },
            {
              "text": "gagnant_colonnes",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_colonnes",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_colonnes <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 7: "
            },
            {
              "text": "gagnant_diagonales",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_diagonales",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_diagonales <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 8: "
            },
            {
              "text": "gagnant",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 0)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 9: "
            },
            {
              "text": "termine",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "termine",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1573045753.115312
    },
    "7.3_morpion_recursif_debut": {
      "grade": 100,
      "solution": "let plateau_initial (taille : int) : plateau =\n  Matrix.init taille (function _ -> Matrix.init taille (function _ -> None))\n;;\n\nlet ligne (m : 'a Matrix.t) (i : int) : 'a list =\n  let rec aux m i acc compt =\n    if compt=(Matrix.size m) then acc\n    else aux m i (Matrix.get m (i,compt)::acc) (compt+1)\n  in List.rev (aux m i [] 0)\n;;\n\nlet colonne (m : 'a Matrix.t) (j : int) : 'a list =\n  let rec aux m i acc compt =\n    if compt=(Matrix.size m) then acc\n    else aux m i (Matrix.get m (compt,j)::acc) (compt+1)\n  in List.rev (aux m j [] 0)\n;;\n\nlet diagonale (m : 'a Matrix.t) (k : int) : 'a list =\n  if k = 0 then \n    let rec aux m acc compt = \n      if compt=(Matrix.size m) then acc\n      else aux m (Matrix.get m (compt,compt)::acc) (compt+1) \n    in List.rev (aux m [] 0)\n  else if k = 1 then\n    let rec aux2 m acc compt1 compt2 = \n      if compt1=(Matrix.size m) then acc\n      else aux2 m (Matrix.get m (compt1,compt2)::acc) (compt1+1) (compt2-1)\n    in List.rev (aux2 m [] 0 ((Matrix.size m) -1))\n  else failwith\"mauvais chiffre\"\n;;\n\nlet rec valeur_constante (l : 'a option list) : 'a option = match l with\n  | [] -> None \n  | [x] -> x\n  | x::reste -> if x = (valeur_constante reste) then x else None\n;;\n\nlet gagnant_lignes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (ligne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_colonnes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (colonne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_diagonales (m : 'a option Matrix.t) : 'a option =\n  if valeur_constante (diagonale m 0)!= None then valeur_constante (diagonale m 0)\n  else valeur_constante (diagonale m 1) \n;;\n\nlet gagnant (m : 'a option Matrix.t) : 'a option =\n  if gagnant_lignes m != None then gagnant_lignes m\n  else if gagnant_colonnes m != None then gagnant_colonnes m\n  else gagnant_diagonales m\n;;\n\nlet sous_morpion_termine m = \n  let rec aux m compt = \n    if List.mem None (ligne m compt) then false else true && aux m (compt+1)\n  in aux m 0\n;; \n\nlet sous_morpion_valide\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    ((i,j) : int * int)\n  : bool = match dernier_coup with\n    None -> true\n  | Some e -> \n      let sous_morpion_prec = Matrix.get plateau (e.position_dim_2) and sous_morpion_act = Matrix.get plateau (i,j) \n      and sous_morpion_aux = Matrix.get plateau (e.position_dim_1) in\n      if sous_morpion_termine sous_morpion_act then false \n      else if (gagnant sous_morpion_aux)!=None then true\n      else sous_morpion_act == Matrix.get plateau (e.position_dim_1)\n;; \n  \n\" if gagnant sous_morpion_act!=None then true\n      else\"\nlet coup_legal\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (coup : coup) \n  : bool = match dernier_coup with\n    None -> (Matrix.get (Matrix.get plateau (coup.position_dim_2)) coup.position_dim_1)=None\n  | Some e -> (sous_morpion_valide plateau dernier_coup coup.position_dim_2) && (Matrix.get (Matrix.get plateau (coup.position_dim_2)) coup.position_dim_1)=None\n;;\n\n\nlet pos_sous_morpion x =\n  if x = 0 || x = 1 || x = 2 then 0\n  else if x = 3 || x = 4 || x = 5 then 1\n  else if x = 6 || x = 7 || x = 8 then 2\n  else failwith\"Error\";;\n\nlet coup_des_coordonnees_absolues\n    (plateau : plateau)\n    (dernier_coup : coup option)\n    (nb_joueurs : int)\n    ((x,y) : int * int)\n  : coup option =  if (x>=9 || y>=9 || x<0 || y<0)  then None else\n    match dernier_coup with\n    | None -> Some {joueur=0;position_dim_2=(pos_sous_morpion x, pos_sous_morpion y);position_dim_1=(x mod 3,y mod 3)}\n    | Some e -> Some {joueur=((e.joueur + 1) mod nb_joueurs);position_dim_2=(pos_sous_morpion x, pos_sous_morpion y);position_dim_1=(x mod 3,y mod 3)}\n;;\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "plateau_initial",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "plateau_initial",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 1",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 2",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "plateau_initial 4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "coup_legal",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_legal",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  <abstr>\n  (Some {joueur = 0; position_dim_2 = (0, 1); position_dim_1 = (2, 1)})\n  {joueur = 1; position_dim_2 = (1, 1); position_dim_1 = (0, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  <abstr>\n  None\n  {joueur = 0; position_dim_2 = (1, 2); position_dim_1 = (2, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  <abstr>\n  None\n  {joueur = 1; position_dim_2 = (1, 1); position_dim_1 = (0, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (2, 1); position_dim_1 = (1, 2)})\n  {joueur = 0; position_dim_2 = (0, 1); position_dim_1 = (1, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_legal\n  <abstr>\n  (Some {joueur = 0; position_dim_2 = (0, 1); position_dim_1 = (1, 1)})\n  {joueur = 0; position_dim_2 = (1, 1); position_dim_1 = (2, 1)}",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 :"
            },
            {
              "text": "coup_des_coordonnees_absolues",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "coup_des_coordonnees_absolues",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues <abstr> None 2 (2, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (2, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (2, 0); position_dim_1 = (2, 0)})\n  2\n  (4, 4)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (1, 1); position_dim_1 = (1, 1)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (2, 0); position_dim_1 = (0, 2)})\n  2\n  (-1, 4)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (1, 0)})\n  2\n  (3, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (1, 0); position_dim_1 = (0, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (0, 0); position_dim_1 = (2, 0)})\n  2\n  (2, 0)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some {joueur = 0; position_dim_2 = (0, 0); position_dim_1 = (2, 0)})",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "coup_des_coordonnees_absolues\n  <abstr>\n  (Some {joueur = 1; position_dim_2 = (2, 0); position_dim_1 = (1, 2)})\n  2\n  (3, -1)",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1573046617.799102
    },
    "7.4_morpion_recursif_victoire": {
      "grade": 100,
      "solution": "\nlet matrix_map (f: 'a -> 'b) (m: 'a Matrix.t): 'b Matrix.t =\n  Matrix.init (Matrix.size m) (fun a -> f (Matrix.get m a)) \n;; \nlet  ligne (m : 'a Matrix.t) (i : int) : 'a list =\n  let rec  aux m' acc i' j= match j with\n      0 -> Matrix.get m' (i',0)::acc\n    |_ -> aux m' (Matrix.get m' (i,j) :: acc) i' (j-1)\n  in aux m [] i ((Matrix.size m) -1) ;;\n    \n  \n\nlet colonne (m : 'a Matrix.t) (j : int) : 'a list =\n  let rec  aux m' acc i' j= match j with\n      0 -> Matrix.get m' (0,i')::acc\n    |_ -> aux m' (Matrix.get m' (j,i') :: acc) i' (j-1)\n  in aux m [] j ((Matrix.size m) -1) ;;\n  \n\nlet diagonale (m : 'a Matrix.t) (k : int) : 'a list =\n  if(k=0) then \n    let rec  aux m' acc j= match j with\n        0 -> Matrix.get m' (0,0)::acc\n      |_ -> aux m' (Matrix.get m' (j,j) :: acc) (j-1)\n    in aux m [] ((Matrix.size m) -1) \n  else \n    let rec  aux m' acc i' j=\n      if(i'=(Matrix.size m) -1) then List.rev (Matrix.get m' (i',0)::acc)\n      else aux m' (Matrix.get m' (i',j) :: acc) (i'+1) (j-1)\n    in aux m [] 0 ((Matrix.size m) -1) ;;\n  \nlet rec valeur_constante (l : 'a option list) : 'a option = match l with\n  | [] -> None \n  | [x] -> x\n  | x::q -> \n      if x = (valeur_constante q) then x \n      else None \n;;\n\nlet gagnant_lignes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (ligne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_colonnes (m : 'a option Matrix.t) : 'a option =\n  let rec aux m compt = \n    if compt = (Matrix.size m) then None\n    else \n      let a = valeur_constante (colonne m compt) in \n      match a with\n        None -> aux m (compt+1)\n      | Some x -> Some x\n  in aux m 0\n;;\n\nlet gagnant_diagonales (m : 'a option Matrix.t) : 'a option =\n  if valeur_constante (diagonale m 0)!= None then valeur_constante (diagonale m 0)\n  else valeur_constante (diagonale m 1) \n;;\n\nlet gagnant (m : 'a option Matrix.t) : 'a option =\n  if(gagnant_diagonales(m)!=None) then gagnant_diagonales (m)\n  else if (gagnant_colonnes(m) !=None) then gagnant_colonnes(m)\n  else if(gagnant_lignes(m)!=None) then gagnant_lignes(m)\n  else None;;\n\nlet termine (m : 'a option Matrix.t) : bool =\n  if( gagnant (m) !=None) then true\n  else false\n;;\n\nlet gagnant_dim_2 (plateau : plateau): int option =\n  let m = matrix_map gagnant plateau\n  in gagnant m\n;;\nlet grilleRemplieBis m = \n  let rec aux m compt =\n    if List.mem false (ligne m compt) then false else aux m (compt+1)\n  in aux m 0\n;;\n\nlet grilleRemplie m = \n  let rec aux m compt =\n    if List.mem None (ligne m compt) then false else aux m (compt+1)\n  in aux m 0\n;;\nlet termine_dim_2 (plateau : plateau) : bool =\n  if gagnant_dim_2 plateau !=None then true \n  else if \n    let m = matrix_map grilleRemplie plateau\n    in grilleRemplieBis m then true \n  else false\n;;\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1: "
            },
            {
              "text": "matrix_map",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "matrix_map",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map <fun> <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map <fun> <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map <fun> <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map <fun> <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "matrix_map <fun> <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "<abstr>",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 8: "
            },
            {
              "text": "gagnant_dim_2",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "gagnant_dim_2",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "(Some 1)",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "gagnant_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "None",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 9: "
            },
            {
              "text": "termine_dim_2",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "termine_dim_2",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "false",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "termine_dim_2 <abstr>",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "true",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        }
      ],
      "mtime": 1573047170.77797
    },
    "8.1_vector": {
      "grade": 26,
      "solution": "let create t valeur =\n  {\n    contents = Array.make t valeur;\n    default=valeur;\n    size=0;\n  }\nlet of_list l d c =\n  if(List.length l > c) then failwith \"la capacite est petite\"\n  else \n    let x = create c d\n    in\n    let rec aux l'= match l' with\n      |[]-> x\n      |a::q -> \n          x.contents.(x.size)<-a;\n          x.size<- x.size+1;\n          aux q\n    in aux l\n;;\n\nlet get v i =\n  if(i<0 || i>=v.size ) then raise   (Invalid_argument \"get\")\n  else v.contents.(i);;\n\n(*let set v i x=\n   if(i<0 || i>= v.size || v.contents.(i)=None) then Invalid_argument \"set\"\n   else  v.contents.(i)<-x;;*)\n\n\n",
      "report": [
        {
          "section": [
            {
              "text": "Question 1 : "
            },
            {
              "text": "create",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "create",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "create 0 \"\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents = [||]; default = \"\"; size = 0}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "create 5 \"-default-\"",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents =\n  [|\"-default-\"; \"-default-\"; \"-default-\"; \"-default-\"; \"-default-\"|];\n default = \"-default-\"; size = 0}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "create",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "create 0 None",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents = [||]; default = None; size = 0}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "create 10 None",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents = [|None; None; None; None; None; None; None; None; None; None|];\n default = None; size = 0}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 2 : "
            },
            {
              "text": "of_list",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "of_list",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "of_list [\"a\"; \"b\"; \"c\"] \"\" 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents = [|\"a\"; \"b\"; \"c\"; \"\"; \"\"|]; default = \"\"; size = 3}",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "of_list [] \"-\" 5",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "{contents = [|\"-\"; \"-\"; \"-\"; \"-\"; \"-\"|]; default = \"-\"; size = 0}",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 3 : "
            },
            {
              "text": "get",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Found"
                },
                {
                  "text": "get",
                  "display": "code"
                },
                {
                  "text": "with compatible type."
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "get\n  {contents = [|\"a\"; \"b\"; \"c\"; \"d\"; \"\"; \"\"; \"\"; \"\"; \"\"; \"\"|]; default = \"\";\n   size = 4}\n  0",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"a\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "get\n  {contents = [|\"a\"; \"b\"; \"c\"; \"d\"; \"\"; \"\"; \"\"; \"\"; \"\"; \"\"|]; default = \"\";\n   size = 4}\n  3",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct value"
                },
                {
                  "text": "\"d\"",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "get\n  {contents = [|\"a\"; \"b\"; \"c\"; \"d\"; \"\"; \"\"; \"\"; \"\"; \"\"; \"\"|]; default = \"\";\n   size = 4}\n  4",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Invalid_argument \"get\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "get\n  {contents = [|\"a\"; \"b\"; \"c\"; \"d\"; \"\"; \"\"; \"\"; \"\"; \"\"; \"\"|]; default = \"\";\n   size = 4}\n  9",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Invalid_argument \"get\")",
                  "display": "code"
                }
              ],
              "result": 1
            },
            {
              "message": [
                {
                  "text": "Computing"
                },
                {
                  "text": "get\n  {contents = [|\"a\"; \"b\"; \"c\"; \"d\"; \"\"; \"\"; \"\"; \"\"; \"\"; \"\"|]; default = \"\";\n   size = 4}\n  10",
                  "display": "code"
                }
              ],
              "result": "informative"
            },
            {
              "message": [
                {
                  "text": "Correct exception"
                },
                {
                  "text": "(Invalid_argument \"get\")",
                  "display": "code"
                }
              ],
              "result": 1
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 4 : "
            },
            {
              "text": "set",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "set",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 5 : "
            },
            {
              "text": "equal",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "equal",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        },
        {
          "section": [
            {
              "text": "Question 6 : "
            },
            {
              "text": "clear",
              "display": "code"
            }
          ],
          "contents": [
            {
              "message": [
                {
                  "text": "Cannot find "
                },
                {
                  "text": "clear",
                  "display": "code"
                }
              ],
              "result": "failure"
            }
          ]
        }
      ],
      "mtime": 1573119006.745303
    }
  },
  "toplevel-histories": {
    "toplevel": {
      "phrases": [
        "let rec longeur l= match l with\n[]->0\n|a::b -> 1+ longeur b;;\n\nlet rec unitaire clauses = match clauses with\n[]->Not_found\n|t::q -> if(longeur t =1) then List.hd t\nelse unitaire q;;",
        "let exemple_3_13 = [[1;2;-3];[2;3];[-1;-2;3];[-1;-3];[1;-2]]",
        "unitaire exemple_3_13",
        "let rec longeur l= match l with\n[]->0\n|a::b -> 1+ longeur b;;\n\nlet rec unitaire clauses = match clauses with\n[]->0 (*Not_found*)\n|t::q -> if(longeur t =1) then List.hd t\nelse unitaire q;;\n",
        "let exemple_3_13 = [[1;2;-3];[2;3];[-1;-2;3];[-1;-3];[1;-2]] ;;",
        "unitaire exemple_3_13",
        "let exemple_7_4 = [[1;2;3];[-1;2;3];[3];[1;-2;-3];[-1;-2;-3];[-3]];;",
        "unitaire exemple_7_4;;",
        "let rec appartientSonContraire x l= match l with\n    |[]-> false\n    |t::q ->\n         if (t=(-x)) then true\n         else appartientSonContraire x q;;",
        "let exemple_7_8 = [[1;-2;3];[1;-3];[2;3];[1;-2]]",
        " printf(appartientSonContraire 1 exemple_7_8);;",
        " print(appartientSonContraire 1 exemple_7_8);;",
        "let x= appartientSonContraire 1 exemple_7_8;;",
        "let ex=[1,2,3,4,5,6,8,8,-5,5,5];;",
        "let x= appartientSonContraire 1 ex;;",
        "let ex=[1;2;3;4;5;6;7;8;9;0;-1];;",
        "let x= appartientSonContraire 1 ex;;",
        "let x= appartientSonContraire 2 ex;;",
        "let rec appartient_bis d l= match d with\n     []-> false\n     |t::q ->\n           if(appartientSonContraire t l) then false\n           else appartient_bis q l;; ",
        "let x = appartient_bis [1;2;3] ex;;",
        "let rec appartient_bis d l= match d with\n     []-> false\n     |t::q ->\n           if(appartientSonContraire t l) then true\n           else appartient_bis q l;; \nlet rec appartient_bis d l= match d with\n     []-> false\n     |t::q ->\n           if(appartientSonContraire t l) then true\n           else appartient_bis q l;; \n",
        "let x= appartient_bis [1;2;3] ex;;",
        "let x= appartient_bis [2;3] ex;;",
        "let transformer ll =\n  let rec aux l acc = match l with\n    |[]-> acc\n    |t::q -> aux q (acc@t)\n  in aux ll [];;",
        "lex x= transformer exemple_7_8;;",
        "let x= transformer exemple_7_8;;",
        "let pur clauses =\n  let aux l c i = match c with\n  |[]-> failwith \" pas de litteral pur\"\n  |t::q ->\n     if((appartient_bis t l)=false) then List.nth l i\n      else aux l q (i+1)\n   in\n   aux (List.flatten clauses) clauses 0 ;;\n",
        "let pur clauses =\n  let rec aux l c i = match c with\n  |[]-> failwith \" pas de litteral pur\"\n  |t::q ->\n     if((appartient_bis t l)=false) then List.nth l i\n      else aux l q (i+1)\n   in\n   aux (List.flatten clauses) clauses 0 ;;\n",
        "let exemple_7_8 = [[1;-2;3];[1;-3];[2;3];[1;-2]] ;;",
        "let x = clauses expemple_7_8;;",
        "let x= pur exemple_7_8;;",
        "let rec appartient_pas d l= match d with\n     []-> false\n     |t::q ->\n           if((appartientSonContraire t l)=false) then true\n           else appartient_pas q l;; \n",
        "let pur clauses =\n  let rec aux l c i = match c with\n  |[]-> failwith \" pas de litteral pur\"\n  |t::q ->\n     if(appartient_pas t l) then List.nth l i\n      else aux l q (i+1)\n   in\n   aux (List.flatten clauses) clauses 0 ;;\n",
        "let x= pur exemple_7_8;;",
        "let exemple_7_2 = [[1;-1;-3];[-2;3];[-2]];;",
        "let x = pur exemple_7_2;;",
        "let rec appartientSonContraire x l= match l with\n    |[]-> false\n    |t::q ->\n         if (t=(-x)) then true\n         else appartientSonContraire x q;;\n",
        "let x= appartientSonContraire -1 [1;4;5;3;6;7;8;8;9;];;",
        "let x = appartientSonContraire (-1) [1;4;5;3;6;7;8;8;9;];; ",
        "let x = appartientSonContraire 1 [-1;4;5;3;6;7;8;8;9;];;",
        "let pur clauses =\n  let rec aux l c i = match c with\n  |[]-> failwith \" pas de litteral pur\"\n  |t::q ->\n     if(appartient_pas t l) then List.nth l i\n      else aux l q (i+1)\n   in\n   aux (List.flatten clauses) clauses 0 ;;",
        "let x= pur exemple_7_2;;",
        "let x= pur exemple_7_8;;",
        "let x= pur [[3];[-3]];;",
        "let x= pur [[1;-1];[4;7;8]];;",
        "let x= pur [[-1;1];[4;7;8]];;",
        "let x= pur [[4;7;8];[4;7;8;1;-1]];;",
        "let x= List.flatten [[4;7;8];[4;7;8;1;-1]];;"
      ],
      "mtime": 1570896137.336
    }
  }
}